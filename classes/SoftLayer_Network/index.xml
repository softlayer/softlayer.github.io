<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SoftLayer_Network on SoftLayer API</title>
    <link>https://sldn.softlayer.com/classes/SoftLayer_Network/</link>
    <description>Recent content in SoftLayer_Network on SoftLayer API</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Feb 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/classes/SoftLayer_Network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>connectPrivateEndpointService</title>
      <link>https://sldn.softlayer.com/reference/services/SoftLayer_Network/connectPrivateEndpointService/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/services/SoftLayer_Network/connectPrivateEndpointService/</guid>
      <description>&lt;h3 id=&#34;connectPrivateEndpointService-example&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#connectPrivateEndpointService-example&#34;&gt;REST Example&lt;/a&gt; &lt;a href=&#34;https://sldn.softlayer.com/article/rest/&#34;&gt;&lt;i class=&#34;fas fa-question&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -g -u &lt;span class=&#34;nv&#34;&gt;$SL_USER&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$SL_APIKEY&lt;/span&gt; -X GET &lt;span class=&#34;se&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.softlayer.com/rest/v3.1/SoftLayer_Network/connectPrivateEndpointService&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>disconnectPrivateEndpointService</title>
      <link>https://sldn.softlayer.com/reference/services/SoftLayer_Network/disconnectPrivateEndpointService/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/services/SoftLayer_Network/disconnectPrivateEndpointService/</guid>
      <description>&lt;h3 id=&#34;disconnectPrivateEndpointService-example&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#disconnectPrivateEndpointService-example&#34;&gt;REST Example&lt;/a&gt; &lt;a href=&#34;https://sldn.softlayer.com/article/rest/&#34;&gt;&lt;i class=&#34;fas fa-question&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -g -u &lt;span class=&#34;nv&#34;&gt;$SL_USER&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$SL_APIKEY&lt;/span&gt; -X GET &lt;span class=&#34;se&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.softlayer.com/rest/v3.1/SoftLayer_Network/disconnectPrivateEndpointService&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>enableVrf</title>
      <link>https://sldn.softlayer.com/reference/services/SoftLayer_Network/enableVrf/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/services/SoftLayer_Network/enableVrf/</guid>
      <description>&lt;h3 id=&#34;enableVrf-example&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#enableVrf-example&#34;&gt;REST Example&lt;/a&gt; &lt;a href=&#34;https://sldn.softlayer.com/article/rest/&#34;&gt;&lt;i class=&#34;fas fa-question&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -g -u &lt;span class=&#34;nv&#34;&gt;$SL_USER&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$SL_APIKEY&lt;/span&gt; -X GET &lt;span class=&#34;se&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.softlayer.com/rest/v3.1/SoftLayer_Network/enableVrf&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>isConnectedToPrivateEndpointService</title>
      <link>https://sldn.softlayer.com/reference/services/SoftLayer_Network/isConnectedToPrivateEndpointService/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/services/SoftLayer_Network/isConnectedToPrivateEndpointService/</guid>
      <description>&lt;h3 id=&#34;isConnectedToPrivateEndpointService-example&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#isConnectedToPrivateEndpointService-example&#34;&gt;REST Example&lt;/a&gt; &lt;a href=&#34;https://sldn.softlayer.com/article/rest/&#34;&gt;&lt;i class=&#34;fas fa-question&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -g -u &lt;span class=&#34;nv&#34;&gt;$SL_USER&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$SL_APIKEY&lt;/span&gt; -X GET &lt;span class=&#34;se&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.softlayer.com/rest/v3.1/SoftLayer_Network/isConnectedToPrivateEndpointService&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>SoftLayer_Network</title>
      <link>https://sldn.softlayer.com/reference/datatypes/SoftLayer_Network/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/datatypes/SoftLayer_Network/</guid>
      <description></description>
    </item>
    <item>
      <title>SoftLayer_Network</title>
      <link>https://sldn.softlayer.com/reference/services/SoftLayer_Network/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/reference/services/SoftLayer_Network/</guid>
      <description></description>
    </item>
    <item>
      <title>Router Model Map</title>
      <link>https://sldn.softlayer.com/python/networkMapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkMapper/</guid>
      <description>&lt;p&gt;Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with &lt;a href=&#34;https://softlayer.github.io/python/networktopology/&#34;&gt;https://softlayer.github.io/python/networktopology/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@author Christopher Gallo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Finds the model number of all networking equipment that is on the way to servers on the account.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import SoftLayer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from pprint import pprint as pp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;class networkMap():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    def __init__(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        self.client = SoftLayer.Client()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    def main(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Goes through each server, and prints out what networking hardware is upstream&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        mask = &amp;#34;mask[id, fullyQualifiedDomainName]&amp;#34; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        servers = self.client[&amp;#39;SoftLayer_Account&amp;#39;].getHardware(mask=mask)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for server in servers:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            print(&amp;#34;%s&amp;#34; % (server[&amp;#39;fullyQualifiedDomainName&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            server_mask = &amp;#34;mask[backendNetworkComponents[networkHardware[hardwareChassis]]]&amp;#34; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            this_server = self.client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].getObject(id=server[&amp;#39;id&amp;#39;],mask=server_mask)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            for component in this_server[&amp;#39;backendNetworkComponents&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                print(&amp;#34;\t%s%s (%smbps) &amp;#34; % (component[&amp;#39;name&amp;#39;], component[&amp;#39;port&amp;#39;], component[&amp;#39;speed&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                for uplink in component[&amp;#39;networkHardware&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    print(&amp;#34;\t\t%s - %s - %s&amp;#34; % (uplink[&amp;#39;fullyQualifiedDomainName&amp;#39;], uplink[&amp;#39;hardwareChassis&amp;#39;][&amp;#39;name&amp;#39;], uplink[&amp;#39;hardwareChassis&amp;#39;][&amp;#39;hardwareFunction&amp;#39;][&amp;#39;description&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    def fromTheTop(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Goes through each DC, and prints out the hierarchy of networking gear&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        dc_mask=&amp;#34;mask[backendHardwareRouters]&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        dcs = self.client[&amp;#39;SoftLayer_Location_Datacenter&amp;#39;].getDatacenters()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for dc in dcs:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            print(&amp;#34;%s&amp;#34; % (dc[&amp;#39;name&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            router_mask = &amp;#34;mask[hardwareChassis,downlinkHardware[hardwareChassis,downlinkHardware[hardwareChassis,downstreamServers[id,fullyQualifiedDomainName],id,fullyQualifiedDomainName]]]&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            backend = self.client[&amp;#39;SoftLayer_Location_Datacenter&amp;#39;].getBackendHardwareRouters(id=dc[&amp;#39;id&amp;#39;],mask=router_mask)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            for router in backend:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                print(&amp;#34;\t%s - %s - %s &amp;#34; % (router[&amp;#39;hardwareFunction&amp;#39;][&amp;#39;description&amp;#39;], router[&amp;#39;fullyQualifiedDomainName&amp;#39;], router[&amp;#39;hardwareChassis&amp;#39;][&amp;#39;name&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                # Can be used to print out info on the linecards of the BCR/FCR&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                # for component in router[&amp;#39;components&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    # print(&amp;#34;\t\t%s&amp;#34; % (component[&amp;#39;hardwareComponentModel&amp;#39;][&amp;#39;longDescription&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                try:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    for down in router[&amp;#39;downlinkHardware&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        print(&amp;#34;\t\t%s - %s &amp;#34; % (down[&amp;#39;fullyQualifiedDomainName&amp;#39;],down[&amp;#39;hardwareChassis&amp;#39;][&amp;#39;name&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        for down_1 in down[&amp;#39;downlinkHardware&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            print(&amp;#34;\t\t\t%s - %s &amp;#34; % (down_1[&amp;#39;fullyQualifiedDomainName&amp;#39;],down_1[&amp;#39;hardwareChassis&amp;#39;][&amp;#39;name&amp;#39;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            for server in down_1[&amp;#39;downstreamServers&amp;#39;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                print(&amp;#34;\t\t\t\t%s&amp;#34; % server[&amp;#39;fullyQualifiedDomainName&amp;#39;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                except KeyError:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    print(&amp;#34;Skipping....&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if __name__ == &amp;#34;__main__&amp;#34;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    main = networkMap()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # main.main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    main.fromTheTop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
