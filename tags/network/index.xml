<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/network/</link>
    <description>Recent content in network on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Image Templates</title>
      <link>https://sldn.softlayer.com/go/workingWithImageTemplates/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/workingWithImageTemplates/</guid>
      <description>Read up on the Golang Example Framework for information on how to setup the CLI Framework to get this code to run easily.&#xA;Creating an flex image from a Virtual Server This script makes a paginated API call to SoftLayer_Virtual_Guest::captureImage().&#xA;/* Create an flex image from a Virtual Server The script makes a single call to the SoftLayer_Virtual_Guest::captureImage method to create a flex image. Please see below for more information. Important manual pages: http://sldn.</description>
    </item>
    <item>
      <title>Working with VLANs</title>
      <link>https://sldn.softlayer.com/go/workingWithNetworks/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/workingWithNetworks/</guid>
      <description>For these set of examples, we will be using a cobra CLI framework for golang, letting us create an individual command for each example as we go along. Read up on the Golang Example Framework for information on how to setup the CLI Framework to get this code to run easily.&#xA;Listing VLANs Listing vlans is likely the most common thing to do, so it makes a good starting point. This script makes a paginated API call to SoftLayer_Account::getNetworkVlans() and prints out a quick CSV about the servers on your acccount.</description>
    </item>
    <item>
      <title>Classic Infrastructure Networking</title>
      <link>https://sldn.softlayer.com/article/Networking/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/Networking/</guid>
      <description>POPs and PODs A Point Of Presence (POP) refers to the networking equipment responsible for handling traffic from The Internet and customer Direct Links. Each POP is connected to at least two others on our backend network&#xA;A Point of Delivery (POD) is a segmentation of our physical datacenters. Each POP will service several POD, although some POPs are standalone. These PODs are generally recognizable by their router in the datacenter.</description>
    </item>
    <item>
      <title>Working with Network_Pod</title>
      <link>https://sldn.softlayer.com/python/network_pod.py/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/network_pod.py/</guid>
      <description>Network_Pod&#xA;Get all Metric Pod import SoftLayer import json client = SoftLayer.create_client_from_env() network_pod_service = client[&amp;#39;Network_Pod&amp;#39;] try: response = network_pod_service.getAllObjects() print(json.dumps(response, sort_keys=True, indent=2, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;))) except SoftLayer.SoftLayerAPIError as e: print(&amp;#34;Unable to list the response for the package: \nfaultCode= %s, \n \nfaultString= %s&amp;#34; % (e.faultCode, e.faultString)) Get all Pods in a datacenter import SoftLayer import json client = SoftLayer.create_client_from_env() network_pod_service = client[&amp;#39;Network_Pod&amp;#39;] # Filter by datacenter name objectFilter={&amp;#34;datacenterName&amp;#34;:{&amp;#34;operation&amp;#34;: &amp;#34;ams01&amp;#34;}} try: response = network_pod_service.</description>
    </item>
    <item>
      <title>status_local.py</title>
      <link>https://sldn.softlayer.com/python/status_local.py/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/status_local.py/</guid>
      <description>&amp;#34;&amp;#34;&amp;#34; Get network status local The script displays the same information as the https://control.softlayer.com/network/status/local page. Important manual pages https://sldn.softlayer.com/reference/services/SoftLayer_Account/ https://sldn.softlayer.com/reference/services/SoftLayer_Account/getObject https://sldn.softlayer.com/reference/datatypes/SoftLayer_Hardware &amp;#34;&amp;#34;&amp;#34; import SoftLayer import json def getRacks(networkHardware, routerStatus): &amp;#34;&amp;#34;&amp;#34;Retrieves the racks information. :param SoftLayer_Hardware networkHardware: A network hardware downstream. :param SoftLayer_Hardware routerStatus: The routers in the account which contains the network incidents. &amp;#34;&amp;#34;&amp;#34; racks = [] if &amp;#39;downstreamNetworkHardware&amp;#39; in networkHardware: for network in networkHardware[&amp;#39;downstreamNetworkHardware&amp;#39;]: rack = {} if &amp;#39;cs&amp;#39; in network[&amp;#39;hostname&amp;#39;]: rack[&amp;#39;name&amp;#39;] = network[&amp;#39;hostname&amp;#39;] + &amp;#39;.</description>
    </item>
    <item>
      <title>Router Model Map</title>
      <link>https://sldn.softlayer.com/python/networkMapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkMapper/</guid>
      <description>Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with https://softlayer.github.io/python/networktopology/&#xA;&amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo Finds the model number of all networking equipment that is on the way to servers on the account. &amp;#34;&amp;#34;&amp;#34; import SoftLayer from pprint import pprint as pp class networkMap(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;#34;&amp;#34;&amp;#34; Goes through each server, and prints out what networking hardware is upstream &amp;#34;&amp;#34;&amp;#34; mask = &amp;#34;mask[id, fullyQualifiedDomainName]&amp;#34; servers = self.</description>
    </item>
    <item>
      <title>Network Topology</title>
      <link>https://sldn.softlayer.com/python/networkTopology/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkTopology/</guid>
      <description>&amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo &amp;#34;&amp;#34;&amp;#34; import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): mask = &amp;#34;&amp;#34;&amp;#34; mask[ attachedNetworkGateway[publicVlan,privateVlan], hardware[fullyQualifiedDomainName,frontendNetworkComponents[uplinkComponent], backendNetworkComponents[uplinkComponent]], network, networkSpace, primaryRouter[hostname], primarySubnet, subnets[networkIdentifier], virtualGuests[fullyQualifiedDomainName] ] &amp;#34;&amp;#34;&amp;#34; orderedVlans = {} result = self.client[&amp;#39;SoftLayer_Account&amp;#39;].getNetworkVlans(mask=mask) &amp;#34;&amp;#34;&amp;#34; This bit builds a nicely structured object of the network topology &amp;#34;&amp;#34;&amp;#34; for vlan in result: vlanNumber = vlan[&amp;#39;vlanNumber&amp;#39;] router,dc = vlan[&amp;#39;primaryRouter&amp;#39;][&amp;#39;hostname&amp;#39;].split(&amp;#34;.&amp;#34;) if dc not in orderedVlans: orderedVlans[dc] = {} if router not in orderedVlans[dc]: orderedVlans[dc][router] = {} toAppend = { &amp;#39;hardware&amp;#39;: vlan[&amp;#39;hardware&amp;#39;], &amp;#39;virtualGuests&amp;#39;: vlan[&amp;#39;virtualGuests&amp;#39;], &amp;#39;subnets&amp;#39;: vlan[&amp;#39;subnets&amp;#39;] } if &amp;#39;attachedNetworkGateway&amp;#39; in vlan: if vlan[&amp;#39;networkSpace&amp;#39;] == &amp;#39;PUBLIC&amp;#39;: gatewayVlan = vlan[&amp;#39;attachedNetworkGateway&amp;#39;][&amp;#39;publicVlan&amp;#39;][&amp;#39;vlanNumber&amp;#39;] elif vlan[&amp;#39;networkSpace&amp;#39;] == &amp;#39;PRIVATE&amp;#39;: gatewayVlan = vlan[&amp;#39;attachedNetworkGateway&amp;#39;][&amp;#39;privateVlan&amp;#39;][&amp;#39;vlanNumber&amp;#39;] if gatewayVlan not in orderedVlans[dc][router]: orderedVlans[dc][router][gatewayVlan] = {} orderedVlans[dc][router][gatewayVlan][vlanNumber] = toAppend orderedVlans[dc][router][gatewayVlan][&amp;#39;gateway&amp;#39;] = True else: orderedVlans[dc][router][vlanNumber] = toAppend &amp;#34;&amp;#34;&amp;#34; This bit prints out everything nicely-ish.</description>
    </item>
  </channel>
</rss>
