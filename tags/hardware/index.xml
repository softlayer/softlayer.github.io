<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hardware on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/hardware/</link>
    <description>Recent content in hardware on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>More Bare Metal Server examples</title>
      <link>https://sldn.softlayer.com/go/server.go/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/server.go/</guid>
      <description>A few examples on interacting with Bare Metal Server, SoftLayer_Hardware_Server.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/terminal&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) // Session created using values set in the environment, or from the local configuration file (i.e. ~/.softlayer). var sess = session.New() type Dictionary map[string]string func main() { // Shows all servers in the account. listServers() // Shows all available packages to order/create a Bare Metal server. listServerPackages() // Shows just fast provision packages to order/create a Bare Metal server.</description>
    </item>
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers.&#xA;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Hardware components and versions</title>
      <link>https://sldn.softlayer.com/python/hardware_components.py/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/hardware_components.py/</guid>
      <description>This python script contains the following:&#xA;1.- Getting hardware information.&#xA;2.- Getting the hardware components.&#xA;3.- Getting hardware components firmware version information.&#xA;4.- Updating the firmware on components.&#xA;import SoftLayer import click from prettytable import PrettyTable class HardwareComponents(): def __init__(self): self.client = SoftLayer.create_client_from_env() def hardware_information(self, hostname): &amp;#34;&amp;#34;&amp;#34; Get the Hardware Server Information. &amp;#34;&amp;#34;&amp;#34; mask = &amp;#39;mask[hardwareStatus,lastOperatingSystemReload,datacenter,billingItem[hourlyFlag],&amp;#39; \ &amp;#39;lastTransaction[transactionGroup],processorPhysicalCoreAmount,memoryCapacity,&amp;#39; \ &amp;#39;operatingSystem[softwareLicense[softwareDescription]]]&amp;#39; hardware_id = self.get_hardware_detail(hostname).get(&amp;#39;id&amp;#39;) result = self.client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].getObject(id=hardware_id, mask=mask) table = PrettyTable() table.</description>
    </item>
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Example of how to build an order for a bare metal server.&#xA;1. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers. 2. Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    <item>
      <title>Gets pending invoice with hardware tags</title>
      <link>https://sldn.softlayer.com/python/pending_invoice_hw_tags.py/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/pending_invoice_hw_tags.py/</guid>
      <description>import SoftLayer import json class PendingInvoice: def __init__(self): self.client = SoftLayer.create_client_from_env() def gather_hardware_tags(self, tags=None): &amp;#34;&amp;#34;&amp;#34;Retrieves hardware with tags references&amp;#34;&amp;#34;&amp;#34; object_mask = &amp;#34;mask[id,hostname,tagReferences[id,tag]]&amp;#34; if tags is None: return self.client[&amp;#39;SoftLayer_Account&amp;#39;].getHardware(mask=object_mask) object_filter = { &amp;#39;hardware&amp;#39;: { &amp;#39;tagReferences&amp;#39;: { &amp;#39;tag&amp;#39;: { &amp;#39;name&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;in&amp;#39;, &amp;#39;options&amp;#39;: [{ &amp;#39;name&amp;#39;: &amp;#39;data&amp;#39;, &amp;#39;value&amp;#39;: tags }] } } } } } return self.client[&amp;#39;SoftLayer_Account&amp;#39;].getHardware(mask=object_mask, filter=object_filter) def gather_invoice_top_level_items(self): &amp;#34;&amp;#34;&amp;#34;Retrieves currently pending invoice with top-level invoice items on account &amp;#34;&amp;#34;&amp;#34; object_mask = &amp;#34;mask[invoiceTopLevelItems]&amp;#34; return self.</description>
    </item>
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://sldn.softlayer.com/python/orderBareMetal/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.&#xA;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Ordering with KeyNames</title>
      <link>https://sldn.softlayer.com/python/ordering_slcli/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/ordering_slcli/</guid>
      <description>Version 5.4.0 of the Softlayer-python project introducted some managers and CLI functions that greatly simplify the ordering processes via the api.&#xA;Building a package still requires a few steps however.&#xA;1. Find the package name slcli order package-list The most common packages are the following:&#xA;Description Package KeyName Package Type Additional Products ADDITIONAL_PRODUCTS ADDITIONAL_SERVICES Cloud Server CLOUD_SERVER VIRTUAL_SERVER_INSTANCE Network Gateway Appliance NETWORK_GATEWAY_APPLIANCE BARE_METAL_GATEWAY Load Balancers LOAD_BALANCERS ADDITIONAL_SERVICES_LOAD_BALANCER Bare Metal Server BARE_METAL_SERVER BARE_METAL_CPU_FAST_PROVISION POWER8 TULETA IBM_POWER_8 BARE_METAL_POWER_CPU Object Storage OBJECT_STORAGE ADDITIONAL_SERVICES_OBJECT_STORAGE Firewall FIREWALL ADDITIONAL_SERVICES_FIREWALL Storage As A Service (StaaS) STORAGE_AS_A_SERVICE_STAAS STORAGE_AS_A_SERVICE Load Balancer As A Service (LBaaS) LBAAS LOAD_BALANCER_AS_A_SERVICE Dedicated Host DEDICATED_HOST DEDICATED_HOST Public Virtual Server PUBLIC_CLOUD_SERVER VIRTUAL_SERVER_INSTANCE Once we have selected a package we need to find out where we can order this package.</description>
    </item>
    <item>
      <title>Ordering Raid</title>
      <link>https://sldn.softlayer.com/ruby/orderingRaid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/orderingRaid/</guid>
      <description>As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.&#xA;It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.&#xA;However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.</description>
    </item>
    <item>
      <title>Router Model Map</title>
      <link>https://sldn.softlayer.com/python/networkMapper/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkMapper/</guid>
      <description>Prints out model numbers of networking equipment that is on route to your servers. Could be useful if merged with https://softlayer.github.io/python/networktopology/&#xA;&amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo Finds the model number of all networking equipment that is on the way to servers on the account. &amp;#34;&amp;#34;&amp;#34; import SoftLayer from pprint import pprint as pp class networkMap(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;#34;&amp;#34;&amp;#34; Goes through each server, and prints out what networking hardware is upstream &amp;#34;&amp;#34;&amp;#34; mask = &amp;#34;mask[id, fullyQualifiedDomainName]&amp;#34; servers = self.</description>
    </item>
    <item>
      <title>Reload Server Examples</title>
      <link>https://sldn.softlayer.com/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/reload_hardware/</guid>
      <description>This article covers a few ways to reload bare metal servers. This article is marked depreciated because of its use of Flex Image Templates, the other ways to reload operating systems are still valid.&#xA;List Flex Image Templates Flex Images are depreciated as of 8/7/2017. SoftLayer Product Lifecycle&#xA;Reloading a hardware server from an image template allows users to restore or reconfigure the server based off a pre-existing Flex Image Template that is associated with the account in use.</description>
    </item>
    <item>
      <title>GetHardware with network components</title>
      <link>https://sldn.softlayer.com/rest/get_hardware_components/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/get_hardware_components/</guid>
      <description>Operation: GET&#xA;Method: SoftLayer_Account::getHardware()&#xA;URL: SoftLayer_Account/getHardware&#xA;Parameters objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&#xA;Example CURL:&#xA;$ curl -u username:api_key -G --data &amp;#34;objectMask=mask[id,fullyQualifiedDomainName,networkComponents[name,networkHardware[hostname],uplinkComponent[name,status]]]&amp;#34; &amp;#34;https://api.softlayer.com/rest/v3/SoftLayer_Account/getHardware&amp;#34; Example Response:&#xA;[ { &amp;#34;fullyQualifiedDomainName&amp;#34;: &amp;#34;bsdal5167180245106688.bsd.citrix.dc&amp;#34;, &amp;#34;id&amp;#34;: 115628, &amp;#34;networkComponents&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;mgmt&amp;#34;, &amp;#34;networkHardware&amp;#34;: [ { &amp;#34;hostname&amp;#34;: &amp;#34;bms173.sr03.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bcs173b.sr03.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bas08b.sr03.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bcr03b.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bcr03a.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bcs173a.sr03.dal05&amp;#34; }, { &amp;#34;hostname&amp;#34;: &amp;#34;bas08a.sr03.dal05&amp;#34; } ], &amp;#34;uplinkComponent&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Ethernet1&amp;#34;, &amp;#34;status&amp;#34;: &amp;#34;ACTIVE&amp;#34; } }, { &amp;#34;name&amp;#34;: &amp;#34;eth&amp;#34;, &amp;#34;networkHardware&amp;#34;: [ { &amp;#34;hostname&amp;#34;: &amp;#34;bcs173a.</description>
    </item>
  </channel>
</rss>
