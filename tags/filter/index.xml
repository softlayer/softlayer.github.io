<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>filter on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/filter/</link>
    <description>Recent content in filter on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/filter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers.&#xA;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Example of how to build an order for a bare metal server.&#xA;1. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers. 2. Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://sldn.softlayer.com/python/orderBareMetal/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.&#xA;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Working with Network Storage</title>
      <link>https://sldn.softlayer.com/python/networkStorageExamples/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkStorageExamples/</guid>
      <description>import SoftLayer import time from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() debugger = SoftLayer.DebugTransport(self.client.transport) self.client.transport = debugger def main(self): block_manager = SoftLayer.BlockStorageManager(self.client) # This block will actually order storage, make sure to uncomment the other order block # order = block_manager.order_block_volume( # storage_type=&amp;#34;endurance&amp;#34;, # location=&amp;#39;dal13&amp;#39;, # size=100, # tier_level=float(4), # os_type=&amp;#39;LINUX&amp;#39;, # snapshot_size=None, # service_offering=&amp;#39;storage_as_a_service&amp;#39;, # hourly_billing_flag=True # ) # Used to test setting a note without actually placing an order # This is the basic structure returned from an order order = { &amp;#39;orderDate&amp;#39;: &amp;#39;2018-11-27T12:03:50-06:00&amp;#39;, &amp;#39;orderId&amp;#39;: 31323125, &amp;#39;placedOrder&amp;#39;: { &amp;#39;id&amp;#39;: 31323125, &amp;#39;items&amp;#39;: [ {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_as_a_service&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Storage as a Service&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_block&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Block Storage&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;performance_storage_space&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;100 GBs&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_tier_level&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;4 IOPS per GB&amp;#39;} ] } } if &amp;#39;placedOrder&amp;#39; in order: print(&amp;#34;OrderID: #{0}&amp;#34;.</description>
    </item>
    <item>
      <title>Look up an SSH key</title>
      <link>https://sldn.softlayer.com/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/sshkey_lookup/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) // The key to look up const label = &amp;#34;Test Public Key&amp;#34; func main() { sess := session.New() service := services.GetAccountService(sess) keys, err := service. Filter(filter.Build( filter.Path(&amp;#34;sshKeys.label&amp;#34;).Eq(label))). Mask(&amp;#34;id,label,key,fingerprint,notes&amp;#34;). GetSshKeys() if err != nil { log.Fatal(&amp;#34;Error retrieving SSH key: &amp;#34;, err) } if len(keys) == 0 { log.Fatal(&amp;#34;No ssh key found labeled &amp;#34;, label) } if len(keys) &amp;gt; 1 { log.Fatal(&amp;#34;More than one ssh key found labeled &amp;#34;, label) } key := keys[0] fmt.</description>
    </item>
  </channel>
</rss>
