<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ordering on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/ordering/</link>
    <description>Recent content in ordering on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/ordering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Quotes</title>
      <link>https://sldn.softlayer.com/python/quotes/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/quotes/</guid>
      <description>Setup All the functions defined in this article will be part of this QuoteExample class. Which only sets up the SoftLayer Client, and configures the debugger, which allows you to see the exact API calls being made.&#xA;import SoftLayer from SoftLayer.managers.ordering import OrderingManager from pprint import pprint class QuoteExample: def __init__(self): self.client = SoftLayer.create_client_from_env() self.mgr = OrderingManager(self.client) debugger = SoftLayer.DebugTransport(self.client.transport) self.client.transport = debugger def debug(self): for call in self.client.transport.get_last_calls(): pprint(self.client.transport.print_reproduceable(call)) Creating a Quote Python def create_quote(self): package = &amp;#39;PUBLIC_CLOUD_SERVER&amp;#39; location = &amp;#39;DALLAS13&amp;#39; preset = &amp;#39;B1_2X8X100&amp;#39; items = [&amp;#39;BANDWIDTH_0_GB_2&amp;#39;, &amp;#39;MONITORING_HOST_PING&amp;#39;, &amp;#39;NOTIFICATION_EMAIL_AND_TICKET&amp;#39;, &amp;#39;OS_DEBIAN_9_X_STRETCH_LAMP_64_BIT&amp;#39;, &amp;#39;1_IP_ADDRESS&amp;#39;, &amp;#39;1_IPV6_ADDRESS&amp;#39;, &amp;#39;1_GBPS_PUBLIC_PRIVATE_NETWORK_UPLINKS&amp;#39;, &amp;#39;REBOOT_REMOTE_CONSOLE&amp;#39;, &amp;#39;AUTOMATED_NOTIFICATION&amp;#39;, &amp;#39;UNLIMITED_SSL_VPN_USERS_1_PPTP_VPN_USER_PER_ACCOUNT&amp;#39;, ] complex_type = &amp;#39;SoftLayer_Container_Product_Order_Virtual_Guest&amp;#39; extras = {&amp;#34;virtualGuests&amp;#34;: [{&amp;#34;hostname&amp;#34;: &amp;#34;gq-test&amp;#34;, &amp;#34;domain&amp;#34;: &amp;#34;test.</description>
    </item>
    <item>
      <title>Basic and Advanced Ordering</title>
      <link>https://sldn.softlayer.com/article/understanding-ordering-basics/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/understanding-ordering-basics/</guid>
      <description>The Catalog Before we can order anything, we need a list of the valid price IDs that represent our order. This article on The Catalog will explain how to retrieve those. Always remember that the price ID that represents a specific item can change at any time, without notice, but the item&amp;rsquo;s KeyName will not. So it is always important before submitting an order to lookup the item keynames to fine the current price ID.</description>
    </item>
    <item>
      <title>Transient Guests</title>
      <link>https://sldn.softlayer.com/article/TransientGuests/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/TransientGuests/</guid>
      <description>Introduction If you are not familiar with the basics of Transient Guests, please see the following documentation.&#xA;Transient virtual servers Configuring notifications for reclaims of transient virtual servers This article will show how to use the SoftLayer-Python library to create a Transient Guest with SoftLayer_Virtual_Guest::createObject(), set the webhook URI with SoftLayer_Virtual_Guest::setTransientWebhook(), and how to test it with SoftLayer_Virtual_Guest::sendTestReclaimScheduledAlert(). Not covered is how to do something useful with the data received, that is left as an exercise for the reader.</description>
    </item>
    <item>
      <title>Working with Network Storage</title>
      <link>https://sldn.softlayer.com/python/networkStorageExamples/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkStorageExamples/</guid>
      <description>import SoftLayer import time from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() debugger = SoftLayer.DebugTransport(self.client.transport) self.client.transport = debugger def main(self): block_manager = SoftLayer.BlockStorageManager(self.client) # This block will actually order storage, make sure to uncomment the other order block # order = block_manager.order_block_volume( # storage_type=&amp;#34;endurance&amp;#34;, # location=&amp;#39;dal13&amp;#39;, # size=100, # tier_level=float(4), # os_type=&amp;#39;LINUX&amp;#39;, # snapshot_size=None, # service_offering=&amp;#39;storage_as_a_service&amp;#39;, # hourly_billing_flag=True # ) # Used to test setting a note without actually placing an order # This is the basic structure returned from an order order = { &amp;#39;orderDate&amp;#39;: &amp;#39;2018-11-27T12:03:50-06:00&amp;#39;, &amp;#39;orderId&amp;#39;: 31323125, &amp;#39;placedOrder&amp;#39;: { &amp;#39;id&amp;#39;: 31323125, &amp;#39;items&amp;#39;: [ {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_as_a_service&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Storage as a Service&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_block&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Block Storage&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;performance_storage_space&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;100 GBs&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_tier_level&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;4 IOPS per GB&amp;#39;} ] } } if &amp;#39;placedOrder&amp;#39; in order: print(&amp;#34;OrderID: #{0}&amp;#34;.</description>
    </item>
    <item>
      <title>Manage Users</title>
      <link>https://sldn.softlayer.com/python/manageUsers/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/manageUsers/</guid>
      <description>This example is a set of scripts I&amp;rsquo;ve used for creating and disabling users.&#xA;Some of this functionality is also in the SLCLI now.&#xA;Create Users Creates a user, sets up proper permissions, sets up devices access restrictions, creates API keys and orders the user a server.&#xA;import SoftLayer.API from pprint import pprint as pp def create_user(username, password): user_template = { &amp;#39;username&amp;#39;: username, &amp;#39;firstName&amp;#39;: &amp;#39;API&amp;#39;, &amp;#39;lastName&amp;#39;: &amp;#39;Learner&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;someone@somewhere.com&amp;#39;, &amp;#39;companyName&amp;#39;: &amp;#39;IBM&amp;#39;, &amp;#39;address1&amp;#39;: &amp;#39;123 api road&amp;#39;, &amp;#39;city&amp;#39;: &amp;#39;Houston&amp;#39;, &amp;#39;country&amp;#39;: &amp;#39;US&amp;#39;, &amp;#39;postalCode&amp;#39;: &amp;#39;TX 77002&amp;#39;, &amp;#39;userStatusId&amp;#39;: 1001, &amp;#39;timezoneId&amp;#39;: 107 } created_user = client[&amp;#39;User_Customer&amp;#39;].</description>
    </item>
    <item>
      <title>Understanding and building an order using the Softlayer order CLI</title>
      <link>https://sldn.softlayer.com/article/understanding-ordering/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/understanding-ordering/</guid>
      <description>In version 5.4.0 of softlayer-python, there is a new slcli command for placing IaaS cloud server orders using the API. This command can also be used to place orders for products that are normally ordered through the IBM Cloud infrastructure customer portal. There are multiple helpers to assist you in creating a specific order. In these examples, you will learn how to:&#xA;Build an order Understand the order structure Search for server packages Identify categories of items Verify the order Place the order Place an order programmatically using Python.</description>
    </item>
    <item>
      <title>VSI Flavors</title>
      <link>https://sldn.softlayer.com/article/vsiflavors/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/vsiflavors/</guid>
      <description>The introduction of Flavors to VSI ordering significantly changes how VSIs are ordered, and the old style of ordering will eventually become unsupported. This page will hopefully explain what changes need to be made to any scripts that order VSIs.&#xA;Support for flavors has been added to the SLCLI, so make sure you have at least version 5.4.0.&#xA;Getting a Flavor List SoftLayer_Virtual_Guest::getCreateObjectOptions is where you can find out the flavor listing, along with all other options you might want to supply to SoftLayer_Virtual_Guest::createObject</description>
    </item>
    <item>
      <title>List items for a Server Order</title>
      <link>https://sldn.softlayer.com/python/list_items_for_order_server.py/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/list_items_for_order_server.py/</guid>
      <description>This is an older article, the following might provide better instructions.&#xA;The Catalog SLCLI Ordering Basic and Advanced Ordering &amp;#34;&amp;#34;&amp;#34; List items to order device. The script displays the available data centers and items for a package. Note: The displayed prices are standard prices. &amp;#34;&amp;#34;&amp;#34; import SoftLayer package_id = 200 # Set True to see the hourly prices. # In case you see empty prices that means the item does not have an hourly price.</description>
    </item>
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://sldn.softlayer.com/php/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.&#xA;openssl genrsa -out domain.key 2048 openssl req -new -sha256 -key domain.key -out domain.csr &amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; } /* * Package 0 is the &amp;#34;Everything else&amp;#34; pacakge, which contains SSL certain. But if you didn&amp;#39;t remember that * this function will get you that information */ function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;#34;ID -&amp;gt; Name \n&amp;#34;; foreach($packages as $package) { print $package-&amp;gt;id .</description>
    </item>
    <item>
      <title>Order an SSL Certificate</title>
      <link>https://sldn.softlayer.com/python/orderSSLCert/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderSSLCert/</guid>
      <description>Generating a CSR You will need a csr to make this request, it should be on your local file system.&#xA;The contents of the CSR MATTER, they need to match the information for what you are ordering.&#xA;orderApproverEmailAddress must match the Email Address of the CSR The CSR Common name must be set and must be a part of the orderApproverEmailAddress $ openssl genrsa -out domain.key 2048 $ openssl req -new -sha256 -key domain.</description>
    </item>
    <item>
      <title>Order Firewall and Security Appliances</title>
      <link>https://sldn.softlayer.com/php/orderFirewalls/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/orderFirewalls/</guid>
      <description>&amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;#34;ID -&amp;gt; Name \n&amp;#34;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;#34; -&amp;gt; &amp;#34; . $package-&amp;gt;name . &amp;#34;\n&amp;#34;; } } function getPackageById($id=0, $onlyShow=0, $showPrices=1) { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;#34;ID, KeyName, Description \n&amp;#34;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    <item>
      <title>Order Server with security software</title>
      <link>https://sldn.softlayer.com/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/orderBareMetal/</guid>
      <description>&amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;#34;ID -&amp;gt; Name \n&amp;#34;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;#34; -&amp;gt; &amp;#34; . $package-&amp;gt;name . &amp;#34;\n&amp;#34;; } } function getPackageById($id=0, $onlyShow=0, $showPrices = 1) { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;#34;ID, KeyName, Description \n&amp;#34;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
    <item>
      <title>List Packages</title>
      <link>https://sldn.softlayer.com/ruby/list_packages/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/list_packages/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; # Helper function to fetch through all results from SoftLayer api # using small page sizes and sleeping before every new page fetch. def fetch_all(service, method) records = []; offset = 0; limit = 10 loop do results = service.result_limit(offset, limit).send(method) records += results break if results.size &amp;lt; limit offset += limit sleep 3 end records end # Credentials to the SoftLayer API are grabbed from the config file by default.</description>
    </item>
    <item>
      <title>Create a virtual server from an existing image template</title>
      <link>https://sldn.softlayer.com/ruby/create_server_from_template/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/create_server_from_template/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; IMAGE_ID = &amp;#39;foobar&amp;#39; # change me. Image template global ID. # Credentials to the API are read from a configuration file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 SoftLayer::Client.default_client = SoftLayer::Client.new order_template = { hostname: &amp;#39;test&amp;#39;, domain: &amp;#39;example.com&amp;#39;, datacenter: &amp;#39;hou02&amp;#39;, cores: 2, # 2 x 2.0 GHz Cores memory: 4, # 4GB RAM private_network_only: false, dedicated_host_only: false, #os_reference_code: &amp;#39;CENTOS_6_64&amp;#39;, # CentOS 6.latest minimal (64 bit) image_template: SoftLayer::ImageTemplate.template_with_global_id(IMAGE_ID), use_local_disk: false, # Use a SAN disk hourly: true # Charge me for hourly use, rather than monthly.</description>
    </item>
    <item>
      <title>Ordering with placeOrder</title>
      <link>https://sldn.softlayer.com/rest/place_order/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/place_order/</guid>
      <description>Operation: POST&#xA;Method: SoftLayer_Product_Order::placeOrder()&#xA;URL: SoftLayer_Product_Order/verifyOrder`&#xA;Example CURL:&#xA;curl -u userid:api_key -X POST --data @create.json https://api.softlayer.com/rest/v3/SoftLayer_Product_Order/verifyOrder Input JSON:&#xA;{ &amp;#34;parameters&amp;#34; : [ { &amp;#34;packageId&amp;#34; : 126, &amp;#34;location&amp;#34; :449494, &amp;#34;quantity&amp;#34; : 1, &amp;#34;hardware&amp;#34;: [{ &amp;#34;hostname&amp;#34;: &amp;#34;TEST&amp;#34;, &amp;#34;domain&amp;#34;: &amp;#34;test1&amp;#34; }], &amp;#34;prices&amp;#34;: [ {&amp;#34;id&amp;#34;: 13739}, {&amp;#34;id&amp;#34;: 13748}, {&amp;#34;id&amp;#34;: 1267}, {&amp;#34;id&amp;#34;: 342}, {&amp;#34;id&amp;#34;: 21141}, {&amp;#34;id&amp;#34;: 58}, {&amp;#34;id&amp;#34;: 876}, {&amp;#34;id&amp;#34;: 57}, {&amp;#34;id&amp;#34;: 55}, {&amp;#34;id&amp;#34;: 21}, {&amp;#34;id&amp;#34;: 906}, {&amp;#34;id&amp;#34;: 420}, {&amp;#34;id&amp;#34;: 418}, {&amp;#34;id&amp;#34;: 37620} ] } ] } The Price Ids Explained Use getItemPrices to find the IDs and Items you need</description>
    </item>
    <item>
      <title>List Packages</title>
      <link>https://sldn.softlayer.com/python/list_packages/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/list_packages/</guid>
      <description>import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): &amp;#34;&amp;#34;&amp;#34; Gets ALL packages, and prints their name and price descriptions &amp;#34;&amp;#34;&amp;#34; mask = &amp;#34;mask[hourlyBillingAvailableFlag]&amp;#34; result = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(); for product in result: print str(product[&amp;#39;id&amp;#39;]) + &amp;#34; - &amp;#34; + product[&amp;#39;name&amp;#39;] # result has a LOT of stuff in it, only print it out if you are ready # pp.pprint(result) def getPackage(self, package_id=0): &amp;#34;&amp;#34;&amp;#34; Gets a specific package and prints out some useful information &amp;#34;&amp;#34;&amp;#34; mask = &amp;#34;mask[items[prices]]&amp;#34; # Not all packages are available in all locations, you can check that with getLocations() # locations = self.</description>
    </item>
    <item>
      <title>Order a vyatta server with placeOrder</title>
      <link>https://sldn.softlayer.com/php/order_vyatta/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/order_vyatta/</guid>
      <description>&amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; $apiUsername = getenv(&amp;#39;SOFTLAYER_USERNAME&amp;#39;); $apiKey = getenv(&amp;#39;SOFTLAYER_API_KEY&amp;#39;); $client = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Order&amp;#39;, null, $apiUser, $key); $template = new stdClass(); $template_extra = new stdClass(); $template-&amp;gt;packageId = 174; $template-&amp;gt;location = 224092; $template-&amp;gt;quantity = 1; $template_extra-&amp;gt;os = 21; //vyatta $template_extra-&amp;gt;hostname = &amp;#39;foo-vga-small&amp;#39;; $template_extra-&amp;gt;domain = &amp;#39;softlayer-singapore-test.com&amp;#39;; //These might be invalid now, please double check on ordering $template_extra-&amp;gt;price_id = array(13739, // Single Quad Xeon 1270 3.4G 8M 21010, // 4G 878, // Raid //31693, // Raid 1 1267, // 500G 274, // 1GbE 342, // 20T // 21, // 1IP 56, // Ping/TCP Mon 57, // Notification ); $my_template = new stdClass(); for ($cnt = 0; $cnt &amp;lt; $template-&amp;gt;quantity; $cnt++) { $domain = new stdClass(); $domain-&amp;gt;hostname = &amp;#34;$template_extra-&amp;gt;hostname-$cnt&amp;#34;; $domain-&amp;gt;domain = $template_extra-&amp;gt;domain; $template-&amp;gt;hardware[] = $domain; } if (empty($template-&amp;gt;imageTemplateGlobalIdentifier)) { $template_extra-&amp;gt;price_id[] = $template_extra-&amp;gt;os; } foreach ($template_extra-&amp;gt;price_id as $id) { $price = new stdClass(); $price-&amp;gt;id = $id; $template-&amp;gt;prices[] = $price; } $my_template-&amp;gt;orderContainers = array(); $my_template-&amp;gt;orderContainers[0]-&amp;gt;prices = $template-&amp;gt;prices; $my_template-&amp;gt;orderContainers[0]-&amp;gt;hardware = $template-&amp;gt;hardware; $my_template-&amp;gt;orderContainers[0]-&amp;gt;quantity = $template-&amp;gt;quantity; $my_template-&amp;gt;orderContainers[0]-&amp;gt;location = $template-&amp;gt;location; $my_template-&amp;gt;orderContainers[0]-&amp;gt;packageId = $template-&amp;gt;packageId; print_r($my_template); $result = $client-&amp;gt;verifyOrder($my_template); print_r($result); </description>
    </item>
    <item>
      <title>Upgrade virtual guest</title>
      <link>https://sldn.softlayer.com/php/upgrade_virtual_guest/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/upgrade_virtual_guest/</guid>
      <description>&amp;lt;?php /* You can use the getenv() module to pull your exported Username and API key to keep from having to store them in your files */ require_once &amp;#39;./vendor/autoload.php&amp;#39;; $apiUsername = getenv(&amp;#39;SOFTLAYER_USERNAME&amp;#39;); $apiKey = getenv(&amp;#39;SOFTLAYER_API_KEY&amp;#39;); $client = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Order&amp;#39;, null, $apiUsername, $apiKey); //The price of the item you want to upgrade to $price1 = new \stdClass(); $price1-&amp;gt;id = 1641; //The virtual guest you want to upgrade $guest = new \stdClass(); $guest-&amp;gt;id = 22983449; $priceClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, 46, $apiUsername, $apiKey); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;description; $objectMask-&amp;gt;capacity; $objectMask-&amp;gt;prices-&amp;gt;id; $objectMask-&amp;gt;categories-&amp;gt;id; $priceClient-&amp;gt;setObjectMask($objectMask); $items = $priceClient-&amp;gt;getObject(); //Shows you what prices are available to select from print_r($items); $upgrade = new \stdClass(); $upgrade-&amp;gt;complexType = &amp;#34;SoftLayer_Container_Product_Order_Virtual_Guest_Upgrade&amp;#34;; $upgrade-&amp;gt;prices = array($price1); $upgrade-&amp;gt;properties = new \stdClass(); $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;name = &amp;#34;MAINTENANCE_WINDOW&amp;#34;; $upgrade-&amp;gt;properties-&amp;gt;maintenanceWindow-&amp;gt;value = &amp;#34;now&amp;#34;; $upgrade-&amp;gt;virtualGuests = array($guest); print_r($upgrade); //change to placeOrder($upgrade) to actually make it happen $response = $client-&amp;gt;placeOrder($upgrade); print_r($response); ?</description>
    </item>
    <item>
      <title>Required price IDs for package</title>
      <link>https://sldn.softlayer.com/php/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/get_required_price_id/</guid>
      <description>&amp;lt;?php /* follow the installation instructions to get SoftLayer API PHP Client working: https://github.com/softlayer/softlayer-api-php-client#installation */ require_once __DIR__.&amp;#39;/vendor/autoload.php&amp;#39;; use SoftLayer\Common\ObjectMask; use SoftLayer\SoapClient; /** * Set your SoftLayer API username and key. */ $apiUsername = &amp;#39;&amp;#39;; $apiKey = &amp;#39;&amp;#39;; $packageId = 46; $client = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, $packageId, $apiUsername, $apiKey); try { $mask = new SoftLayer\Common\ObjectMask(); $mask-&amp;gt;configuration-&amp;gt;itemCategory; $client-&amp;gt;setObjectMask($mask); $configs = $client-&amp;gt;getConfiguration(); $requiredCategories = array(); foreach ($configs as $config) { if ($config-&amp;gt;isRequired == 1) { $requiredCategories[$config-&amp;gt;itemCategory-&amp;gt;id][&amp;#39;name&amp;#39;] = $config-&amp;gt;itemCategory-&amp;gt;name; } } $categories = array(); $mask = new SoftLayer\Common\ObjectMask(); $mask-&amp;gt;itemPrices-&amp;gt;categories; $client-&amp;gt;setObjectMask($mask); $prices = $client-&amp;gt;getItemPrices(); foreach ($requiredCategories as $category =&amp;gt; $categoryName) { $i = 0; foreach ($prices as $price) { foreach ($price-&amp;gt;categories as $priceCategory) { if ($priceCategory-&amp;gt;id == $category) { $requiredCategories[$category][&amp;#39;itemPrices&amp;#39;][$i][&amp;#39;id&amp;#39;] = $price-&amp;gt;id; $requiredCategories[$category][&amp;#39;itemPrices&amp;#39;][$i][&amp;#39;description&amp;#39;] = $price-&amp;gt;item-&amp;gt;description; asort($requiredCategories[$category][&amp;#39;itemPrices&amp;#39;][$i]); asort($requiredCategories); $i++; } } } } print_r($requiredCategories); } catch ( Exception $e) { die( $e-&amp;gt;getMessage()); } ?</description>
    </item>
    <item>
      <title>Required price IDs for package</title>
      <link>https://sldn.softlayer.com/python/get_required_price_id/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/get_required_price_id/</guid>
      <description>import SoftLayer package = 46 client = SoftLayer.Client() categoryObjectMask = &amp;#34;mask[isRequired, itemCategory[id, name]]&amp;#34; configurations = client[&amp;#39;Product_Package&amp;#39;].getConfiguration( id=package, mask=categoryObjectMask) pricesObjectMask = &amp;#34;mask[id;item.description;categories.id]&amp;#34; prices = client[&amp;#39;Product_Package&amp;#39;].getItemPrices( id=package, mask=pricesObjectMask) headerFormat = &amp;#39;%s - %s:&amp;#39; priceFormat = &amp;#39; %s -- %s&amp;#39; for configuration in configurations: if (not configuration[&amp;#39;isRequired&amp;#39;]): continue print headerFormat % (configuration[&amp;#39;itemCategory&amp;#39;][&amp;#39;name&amp;#39;], configuration[&amp;#39;itemCategory&amp;#39;][&amp;#39;id&amp;#39;]) for price in prices: if (&amp;#39;categories&amp;#39; not in price): continue if any((category.get(&amp;#39;id&amp;#39;) == configuration[&amp;#39;itemCategory&amp;#39;][&amp;#39;id&amp;#39;] for category in price[&amp;#39;categories&amp;#39;])): print priceFormat % (price[&amp;#39;id&amp;#39;], price[&amp;#39;item&amp;#39;][&amp;#39;description&amp;#39;]) </description>
    </item>
  </channel>
</rss>
