<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lbaas_loadbalancer on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/lbaas_loadbalancer/</link>
    <description>Recent content in lbaas_loadbalancer on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/lbaas_loadbalancer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Lbaas loadBalancer</title>
      <link>https://sldn.softlayer.com/java/lbaasLoadBalancer.java/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/lbaasLoadBalancer.java/</guid>
      <description>Lbaas_LoadBalancer&#xA;LBaaS loadBalancer examples Some examples use the most important methods. package loadbalancer; import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.Location; import com.softlayer.api.service.network.lbaas.*; import com.softlayer.api.service.network.lbaas.LoadBalancer.Service; import java.util.List; public class LoadBalancers { ApiClient client; Service service; /** * method constructor sent the package Id and get the package items * @param user user name credential. * @param apiKey api key credential. */ public LoadBalancers(String user, String apiKey) { client = (new RestApiClient()).</description>
    </item>
    <item>
      <title>Working with Lbaas loadBalancer</title>
      <link>https://sldn.softlayer.com/ruby/lbaasLoadBalancer.rb/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/lbaasLoadBalancer.rb/</guid>
      <description>Lbaas_LoadBalancer&#xA;LBaaS loadBalancer examples Some examples use the most important methods. require &amp;#39;softlayer_api&amp;#39; require &amp;#39;json&amp;#39; class LoadBalancer def initialize(username, apikey) client = SoftLayer::Client.new(username: username, api_key: apikey,) @loadBalancer_service = client[&amp;#39;SoftLayer_Network_LBaaS_LoadBalancer&amp;#39;] end def getAllObjects() return @loadBalancer_service.getAllObjects() end def cancelLoadBalancer(loadBalancerId, uuid) return @loadBalancer_service.object_with_id(loadBalancerId).cancelLoadBalancer(uuid) end def enableOrDisableDataaLogs(loadBalancerId, uuid, enable) return @loadBalancer_service.object_with_id(loadBalancerId).enableOrDisableDataLogs(uuid, enable) end def getDatacenter(loadBalancerId) return @loadBalancer_service.object_with_id(loadBalancerId).getDatacenter() end def getHealthMonitors(loadBalancerId) return @loadBalancer_service.object_with_id(loadBalancerId).getHealthMonitors() end def getL7Pools(loadBalancerId) return @loadBalancer_service.object_with_id(loadBalancerId).getL7Pools() end def getListenner(loadBalancerId) return @loadBalancer_service.object_with_id(loadBalancerId).getListenners() end def getLoadBalancer(loadBalancerId, uuid) return @loadBalancer_service.</description>
    </item>
  </channel>
</rss>
