<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>template on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/template/</link>
    <description>Recent content in template on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/template/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Managing Image Templates</title>
      <link>https://sldn.softlayer.com/python/Manage_Image_Templates/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/Manage_Image_Templates/</guid>
      <description>Create an Image Template The script creates a standard image template, it makes a call to the SoftLayer_Virtual_Guest::createArchiveTransaction method sending the IDs of the disks in the request, the response will provide an ID property which is the Transaction number until the template has been created. This will take the Virtual Guest offline for this process.&#xA;import SoftLayer from pprint import pprint as pp # The virtual guest ID you want to create a template virtualGuestId = 39202937 # The name of the image template groupName = &amp;#39;fmirGroupImageTemplate&amp;#39; # An optional note for the image template note = &amp;#39;an optional fmir note&amp;#39; &amp;#34;&amp;#34;&amp;#34; Build a skeleton SoftLayer_Virtual_Guest_Block_Device object containing the disks you want to the image.</description>
    </item>
    <item>
      <title>Capture an Image Template</title>
      <link>https://sldn.softlayer.com/java/CaptureImageTemplate.java/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/CaptureImageTemplate.java/</guid>
      <description>Capture Image Template&#xA;import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.virtual.Guest; import com.softlayer.api.service.virtual.guest.block.Device; import java.util.ArrayList; import java.util.List; public class CaptureImageTemplate { private ApiClient client; private long virtualGuestId; public CaptureImageTemplate(long guestId) { String username = &amp;#34;set-me&amp;#34;; String apiKey = &amp;#34;set-me&amp;#34;; client = new RestApiClient().withCredentials(username, apiKey); virtualGuestId = guestId; } public void capture(String name, String note) { Guest.Service guestService = Guest.service(client, virtualGuestId); guestService.withMask().blockDevices().diskImage(); Guest virtualGuest = guestService.getObject(); List&amp;lt;Device&amp;gt; blockDevices = gatherDevices(virtualGuest.</description>
    </item>
    <item>
      <title>Image Template Costs</title>
      <link>https://sldn.softlayer.com/python/image_template_costs/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/image_template_costs/</guid>
      <description>The way this script works is that first it gets your last invoice, and finds all the Image Template items on it and builds a list of those, with their cost.&#xA;Then it goes through all your current image templates, correlates the templates Storage_Repository, and child templates with what was on your last invoice, and does some very basic math to come up with a next month cost.&#xA;Be aware that the next month cost assumes the template has existed in the repository for the entire month.</description>
    </item>
    <item>
      <title>Object Storage Uploader</title>
      <link>https://sldn.softlayer.com/python/swiftUploader/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/swiftUploader/</guid>
      <description>Overview Weâ€™ve recently added the option to import customer-supplied Virtual Hard Disks (VHDs) to our object storage offering. This is a great option for our customers who may have special virtual machines that they have spent hours perfecting. Since learning to import these images can pose a slight challenge, especially for those unfamiliar with object storage (OpenStack Swift), I wrote this blog to share scripts that will streamline the process.</description>
    </item>
  </channel>
</rss>
