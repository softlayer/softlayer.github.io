<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notification on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/notification/</link>
    <description>Recent content in notification on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Oct 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/notification/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Events and Notifications</title>
      <link>https://sldn.softlayer.com/article/Events/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/Events/</guid>
      <description>The Basics There are two types of Events that the SoftLayer API deals with.&#xA;Maintenance Events These are the Classic Infrastructure Planned, Unplanned and Announcement events in the portal. These events DO NOT include other cloud.ibm.com services and notifications. ONLY classic infrastructure.&#xA;Monitoring Events These are the Hardware and Virtual monitoring events that will let you know if a server has gone down/up.&#xA;From the API perspective, these are two separate things, but we will talk about them both in this article since both events can trigger an email alert that we will want to configure.</description>
    </item>
    <item>
      <title>Managing Notification Occurrence Events services</title>
      <link>https://sldn.softlayer.com/go/notification_ocurrent_events.go/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/notification_ocurrent_events.go/</guid>
      <description>Setup Each of these snippets below will share basically the same initialization code, so to save some space we will include the initialization code here, and assume you can setup the SoftLayer client before running each example.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { username := &amp;#34;Set - me&amp;#34; apikey := &amp;#34;Set - me&amp;#34; // Create SoftLayer API session sess := session.New(username, apikey) notificationService := services.</description>
    </item>
    <item>
      <title>Get Notifications</title>
      <link>https://sldn.softlayer.com/ruby/getNotifications/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/getNotifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.&#xA;require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) theDate = &amp;#39;01/01/2017 01:00:00&amp;#39; theFilter = { &amp;#39;startDate&amp;#39;=&amp;gt; { &amp;#39;operation&amp;#39;=&amp;gt; &amp;#39;greaterThanDate&amp;#39;, &amp;#39;options&amp;#39;=&amp;gt; [ {&amp;#39;name&amp;#39;=&amp;gt; &amp;#39;date&amp;#39;, &amp;#39;value&amp;#39; =&amp;gt; [theDate]} ] } } getresults = client[&amp;#39;SoftLayer_Notification_Occurrence_Event&amp;#39;].getAllObjects(filter=theFilter) pp getresults </description>
    </item>
    <item>
      <title>Get Notifications</title>
      <link>https://sldn.softlayer.com/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/notifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.&#xA;import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): theDate = &amp;#39;01/01/2016 01:00:00&amp;#39; _filter = { &amp;#39;startDate&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;greaterThanDate&amp;#39;, &amp;#39;options&amp;#39;: [ {&amp;#39;name&amp;#39;: &amp;#39;date&amp;#39;, &amp;#39;value&amp;#39;: [theDate]} ] } } result = self.client[&amp;#39;SoftLayer_Notification_Occurrence_Event&amp;#39;].getAllObjects(filter=_filter) pp(result) if __name__ == &amp;#34;__main__&amp;#34;: main = example() main.main() </description>
    </item>
  </channel>
</rss>
