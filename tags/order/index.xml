<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>order on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/order/</link>
    <description>Recent content in order on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/order/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Step By Step Ordering</title>
      <link>https://sldn.softlayer.com/article/step_by_step_ordering/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/step_by_step_ordering/</guid>
      <description>SoftLayer Catalog API Video Slides </description>
    </item>
    <item>
      <title>Working with Vlans</title>
      <link>https://sldn.softlayer.com/perl/workingWithVlans/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/perl/workingWithVlans/</guid>
      <description>Read up on the Perl article for information on how to setup the CLI Framework to get this code to run easily.&#xA;Placing Vlan order This script makes a paginated API call to SoftLayer_Product_Order::verifyOrder().&#xA;use lib &amp;#39;/softlayer-api-perl-client-master/&amp;#39;; use SoftLayer::API::SOAP; use Data::Dumper; # Your SoftLayer API username and key. my $username = &amp;#39;set me&amp;#39;; my $apikey = &amp;#39;set me&amp;#39;; # Building a skeleton SoftLayer_Container_Product_Order_Network_Vlan object # to model the order for the new VLAN my $order_template = bless({ &amp;#39;orderContainerType&amp;#39; =&amp;gt; &amp;#39;SoftLayer_Container_Product_Order_Network_Vlan&amp;#39;, &amp;#39;location&amp;#39; =&amp;gt; &amp;#39;AMSTERDAM&amp;#39;, &amp;#39;packageId&amp;#39; =&amp;gt; 571,&#x9;# ADDITIONAL_SERVICES_NETWORK_VLAN &amp;#39;prices&amp;#39; =&amp;gt; [ { &amp;#39;complexType&amp;#39; =&amp;gt; &amp;#39;SoftLayer_Product_Item_Price&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 51775&#x9;# The pice for PUBLIC_NETWORK_VLAN } ], &amp;#39;quantity&amp;#39; =&amp;gt; 1, &amp;#39;sendQuoteEmailFlag&amp;#39; =&amp;gt; True, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;A Vlan Name&amp;#39; },&amp;#39;slapi:SoftLayer_Container_Product_Order_Network_Vlan&amp;#39;); # Creating a SoftLayer API client object my $product_order = SoftLayer::API::SOAP-&amp;gt;new(&amp;#39;SoftLayer_Product_Order&amp;#39;, undef, $username, $apikey); # verifyOrder() will check your order for errors.</description>
    </item>
    <item>
      <title>More Bare Metal Server examples</title>
      <link>https://sldn.softlayer.com/go/server.go/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/server.go/</guid>
      <description>A few examples on interacting with Bare Metal Server, SoftLayer_Hardware_Server.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/terminal&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) // Session created using values set in the environment, or from the local configuration file (i.e. ~/.softlayer). var sess = session.New() type Dictionary map[string]string func main() { // Shows all servers in the account. listServers() // Shows all available packages to order/create a Bare Metal server. listServerPackages() // Shows just fast provision packages to order/create a Bare Metal server.</description>
    </item>
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/order_server_by_vlan_router.go/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers.&#xA;Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Order a Virtual and Bare Metal Server by frondend/backend vlan or router</title>
      <link>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_server_by_vlan_router.py/</guid>
      <description>Order a Bare Metal by frondend/backend vlan or router. Example of how to build an order for a bare metal server.&#xA;1. Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers. 2. Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I’ve included gatherPriceIds() to match up KeyNames to build a list of price ids.</description>
    </item>
    <item>
      <title>Working with DedicatedHost</title>
      <link>https://sldn.softlayer.com/java/DedicatedHost/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/DedicatedHost/</guid>
      <description>import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.Account; import com.softlayer.api.service.Entity; import com.softlayer.api.service.Location; import com.softlayer.api.service.container.product.Order; import com.softlayer.api.service.container.product.order.virtual.DedicatedHost; import com.softlayer.api.service.container.product.order.virtual.Guest; import com.softlayer.api.service.product.Item; import com.softlayer.api.service.product.Package; import com.softlayer.api.service.product.item.Price; import com.softlayer.api.service.product.pkg.Preset; import java.util.ArrayList; import java.util.List; import java.util.Properties; public class DedicatedHostExample { private static final String PACKAGE = &amp;#34;packageKeyname&amp;#34;; private static final String HOST = &amp;#34;hostname&amp;#34;; private static final String DOMAIN = &amp;#34;domain&amp;#34;; private static final String DATACENTER = &amp;#34;datacenter&amp;#34;; private static final String FLAVOR = &amp;#34;flavor&amp;#34;; private final ApiClient client; Properties properties; public DedicatedHostExample() { String username = &amp;#34;set me&amp;#34;; String apiKey = &amp;#34;set me&amp;#34;; client = new RestApiClient().</description>
    </item>
    <item>
      <title>Working with Network Vlan</title>
      <link>https://sldn.softlayer.com/java/networkVlan.java/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/networkVlan.java/</guid>
      <description>import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.Account; import com.softlayer.api.service.Entity; import com.softlayer.api.service.Location; import com.softlayer.api.service.container.product.Order; import com.softlayer.api.service.container.product.order.network.Vlan; import com.softlayer.api.service.location.Datacenter; import com.softlayer.api.service.product.Item; import com.softlayer.api.service.product.Package; import com.softlayer.api.service.product.item.Price; import java.util.List; public class NetworkVlanExample { private final ApiClient client; public NetworkVlanExample() { String username = &amp;#34;set me&amp;#34;; String apiKey = &amp;#34;set me&amp;#34;; client = new RestApiClient().withCredentials(username, apiKey).withLoggingEnabled(); } public static void main(String[] args) { final String vlanName = &amp;#34;Test Vlan&amp;#34;; final String packageKeyname = &amp;#34;NETWORK_VLAN&amp;#34;; final String datacenter = &amp;#34;dal13&amp;#34;; final String item = &amp;#34;PRIVATE_NETWORK_VLAN&amp;#34;; final boolean verify = true; NetworkVlanExample networkVlan = new NetworkVlanExample(); networkVlan.</description>
    </item>
    <item>
      <title>Order Load Balancer</title>
      <link>https://sldn.softlayer.com/java/OrderLoadBalancer.java/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/OrderLoadBalancer.java/</guid>
      <description>The following example retrieves the package id, subnet id and prices for a &amp;ldquo;Load Balancer As A Service(LBaaS)&amp;rdquo; package, builds the order data and place/verify the order.&#xA;import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.Account; import com.softlayer.api.service.container.product.order.Receipt; import com.softlayer.api.service.container.product.order.network.loadbalancer.AsAService; import com.softlayer.api.service.location.Region; import com.softlayer.api.service.network.Subnet; import com.softlayer.api.service.network.lbaas.LoadBalancerProtocolConfiguration; import com.softlayer.api.service.network.vlan.Type; import com.softlayer.api.service.product.Item; import com.softlayer.api.service.product.Order; import com.softlayer.api.service.product.Package; import com.softlayer.api.service.product.item.Price; import java.util.ArrayList; import java.util.List; public class OrderLoadBalance { /* Returns the packageId for the LBaaS */ public Long getPackageId(ApiClient client, String pkg_name) { Long packageId = 0L; Package.</description>
    </item>
    <item>
      <title>Order a Virtual Server</title>
      <link>https://sldn.softlayer.com/go/order_virtual_guest/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/order_virtual_guest/</guid>
      <description>Note: See the Parameters struct to know what data you can set at order time.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) // Create the session and services var sess = session.New() var packageService = services.GetProductPackageService(sess) var orderService = services.GetProductOrderService(sess) // Parameters will help us to reduce the number of argumments in a function // and not all of them are required. e.g. hostID, reservedCapacityID,sshKeys, etc.</description>
    </item>
    <item>
      <title>Order a Netscaler</title>
      <link>https://sldn.softlayer.com/python/orderNetscaler/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderNetscaler/</guid>
      <description>import SoftLayer from pprint import pprint class Network: def __init__(self): client = SoftLayer.Client() self.package_service = client[&amp;#39;Product_Package&amp;#39;] self.order_service = client[&amp;#39;Product_Order&amp;#39;] def print_available_locations(self, package_id): pass regions = self.package_service.getRegions(id=package_id) for region in regions: print(&amp;#34;\n%s | %s | %s&amp;#34; % (region[&amp;#34;location&amp;#34;][&amp;#34;locationId&amp;#34;], region[&amp;#34;keyname&amp;#34;], region[&amp;#34;description&amp;#34;])) def print_available_items(self, package_id): _mask = &amp;#34;mask[id, description, keyName]&amp;#34; items = self.package_service.getItems(mask=_mask, id=package_id) for item in items: print(&amp;#34;\n%s | %s | %s&amp;#34; % (item[&amp;#34;id&amp;#34;], item[&amp;#34;keyName&amp;#34;], item[&amp;#34;description&amp;#34;])) def get_package_id(self, keyname): _filter = {&amp;#34;type&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyname}}} package = self.</description>
    </item>
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://sldn.softlayer.com/python/orderBareMetal/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.&#xA;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Order a Vlan</title>
      <link>https://sldn.softlayer.com/ruby/place_order_vlan/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/place_order_vlan/</guid>
      <description>This example uses verifyOrder method to check the order for errors, replace it by placeOrder method when you are ready to order.&#xA;require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; class Network def initialize(username, apikey) client = SoftLayer::Client.new(username: username, api_key: apikey) @package_service = client[&amp;#34;Product_Package&amp;#34;] @order_service = client[&amp;#34;Product_Order&amp;#34;] end def get_package_id(keyname) obj_filter = SoftLayer::ObjectFilter.new do |filter| filter.accept(&amp;#34;type.keyName&amp;#34;).when_it is(keyname) end package = @package_service.object_filter(obj_filter).getAllObjects() return package[0][&amp;#34;id&amp;#34;] end def get_price_id(package_id, item_keyname) obj_filter = SoftLayer::ObjectFilter.new do |filter| filter.accept(&amp;#34;items.keyName&amp;#34;).when_it is(item_keyname) end items = @package_service.</description>
    </item>
    <item>
      <title>Order Global IP</title>
      <link>https://sldn.softlayer.com/python/order_global_ipv4_ipv6/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_global_ipv4_ipv6/</guid>
      <description>This example uses verifyOrder method to check the order for errors, replace it by placeOrder method when you are ready to order.&#xA;import SoftLayer from pprint import pprint class Network: def __init__(self): self.client = SoftLayer.Client() def _get_package_id(self, keyname): _filter = {&amp;#34;type&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyname}}} package = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(filter=_filter) return package[0][&amp;#39;id&amp;#39;] def _get_item_price(self, package_id, item_keyname): _filter = {&amp;#34;items&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:item_keyname}}} items = self.client[&amp;#39;Product_Package&amp;#39;].getItems(filter=_filter, id=package_id) price_id = [p[&amp;#34;id&amp;#34;] for p in items[0][&amp;#34;prices&amp;#34;] if not p[&amp;#34;locationGroupId&amp;#34;]][0] return price_id def order_global_ip(self, package, item_keyname): packageId = self.</description>
    </item>
    <item>
      <title>Order Static Subnet</title>
      <link>https://sldn.softlayer.com/python/order_static_subnet/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_static_subnet/</guid>
      <description>Such as in the portal page, it is required to select an ip address to order the new static subnet, and to find the available IDs it is recommended to retrieve the subnets either with Account::getSubnets or Network_Vlan::getSubnets&#xA;https://api.softlayer.com/rest/v3/SoftLayer_Network_Vlan/12345/getSubnets Next, select a subnet ID and call to Network_Subnet::getRoutableEndpointIpAddresses to retrieve the ID of ip addresses which are available to be selected&#xA;https://api.softlayer.com/rest/v3/SoftLayer_Network_Subnet/67890/getRoutableEndpointIpAddresses This example uses verifyOrder method to check the order for errors, replace it by placeOrder method when you are ready to order.</description>
    </item>
    <item>
      <title>Order Portable Subnet</title>
      <link>https://sldn.softlayer.com/python/order_portable_subnet/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_portable_subnet/</guid>
      <description>This example uses the verifyOrder method to check the order for errors, replace it by placeOrder method when you are ready to order.&#xA;NOTE: The selected Vlan must be in the same location you want to order the new portable subnet&#xA;import SoftLayer from pprint import pprint class Network: def __init__(self): self.client = SoftLayer.Client() def _get_package_id(self, keyname): _filter = {&amp;#34;type&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyname}}} package = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(filter=_filter) return package[0][&amp;#39;id&amp;#39;] def _get_item_price(self, package_id, item_keyname): _filter = {&amp;#34;items&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:item_keyname}}} items = self.</description>
    </item>
    <item>
      <title>Various Place Order Examples</title>
      <link>https://sldn.softlayer.com/python/ordering_examples/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/ordering_examples/</guid>
      <description>NOTICE: Be careful using hard coded price IDs, as they can change at any time without notice. For a better way of building orders, see https://softlayer.github.io/article/understanding-ordering/&#xA;EVault &amp;#34;&amp;#34;&amp;#34; Order a Evault Build a SoftLayer_Container_Product_Order_Network_Storage_Backup_Evault_Vault object for a new Evault order and pass it to the SoftLayer_Product_Order for more information see below: &amp;#34;&amp;#34;&amp;#34; import SoftLayer &amp;#34;&amp;#34;&amp;#34; # Your SoftLayer API username and key. # Generate an API key at the SoftLayer Customer Portal: # https://manage.</description>
    </item>
    <item>
      <title>Order Evault</title>
      <link>https://sldn.softlayer.com/csharp/OrderEvault.cs/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/csharp/OrderEvault.cs/</guid>
      <description>using System; using System.Collections.Generic; using System.Linq; namespace OrderEvault { class Program { static void Main(string[] args) { // Your SoftLayer username and API username. authenticate authenticate = new authenticate() { username = &amp;#34;set me&amp;#34;, apiKey = &amp;#34;set me&amp;#34; }; // Evault prices are on this package string package = &amp;#34;ADDITIONAL_SERVICES&amp;#34;; string location = &amp;#34;DALLAS06&amp;#34;; // KeyName format usually is EVAULT_##_GB and the values could be: 10, 20, 30, 40, 50, // 60, 100, 175, 250, 350, 500, 750, 1000, 1500, 2000, 4000 string itemKeyName = &amp;#34;EVAULT_10_GB&amp;#34;; // Virtual server ID to which the evault will be added int guestID = 123456789; IList&amp;lt;SoftLayer_Virtual_Guest&amp;gt; guestList = new List&amp;lt;SoftLayer_Virtual_Guest&amp;gt;() { new SoftLayer_Virtual_Guest(){id=guestID, idSpecified=true} }; // Initialize the Evault object Evault evault = new Evault(authenticate); // Remove the &amp;#39;verify&amp;#39; param or set it to false to place the order evault.</description>
    </item>
    <item>
      <title>Working with placement groups</title>
      <link>https://sldn.softlayer.com/go/placement_group.go/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/placement_group.go/</guid>
      <description>Create Placement Group&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { // Create a session sess := session.New() // Get SoftLayer_Virtual_PlacementGroup service. service := services.GetVirtualPlacementGroupService(sess) // A Virtual_PlacementGroup template templateObject := datatypes.Virtual_PlacementGroup{ Name: sl.String(&amp;#34;test&amp;#34;), BackendRouterId: sl.Int(12345), RuleId: sl.Int(1), } // Get SoftLayer_Virtual_PlacementGroup service. receipt, err := service.CreateObject(&amp;amp;templateObject) if err != nil { fmt.Printf(&amp;#34;%s\n&amp;#34;, err) return } jsonFormat, jsonErr := json.MarshalIndent(receipt, &amp;#34;&amp;#34;, &amp;#34; &amp;#34;) if jsonErr !</description>
    </item>
    <item>
      <title>Working with placement groups</title>
      <link>https://sldn.softlayer.com/java/placementGroup.java/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/placementGroup.java/</guid>
      <description>Create Placement Group&#xA;import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.virtual.PlacementGroup; public class CreateVirtualPlacementGroup { public static void main(String []arg){ String username = &amp;#34;set me&amp;#34;; String apiKey = &amp;#34;set me&amp;#34;; PlacementGroup placement = new PlacementGroup(); placement.setName(&amp;#34;fotest&amp;#34;); placement.setBackendRouterId(11111L); placement.setRuleId(1L); ApiClient client = new RestApiClient().withCredentials(username, apiKey).withLoggingEnabled(); PlacementGroup.Service placementGroup = PlacementGroup.service(client); try { PlacementGroup result = placementGroup.createObject(placement); Gson gson = new GsonBuilder().setPrettyPrinting().create(); System.out.println(gson.toJson(result)); } catch (Exception e) { System.out.println(&amp;#34;Error: &amp;#34; + e); } } } Delete Placement Group</description>
    </item>
    <item>
      <title>Order an endurance storage (block/file)</title>
      <link>https://sldn.softlayer.com/python/order_endurance_storage/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_endurance_storage/</guid>
      <description>Important Note: There is a new version of storage devices (STaaS v2) so it is recomended to review Order Block/File storages with Managers Endurance Block/File storage devices are under package 240, the complexType is SoftLayer_Container_Product_Order_Network_Storage_Enterprise for both of them have in the order template.&#xA;**Tips before ordering** In most of the cases the order verification fails whether the selected price cannot be ordered in the selected location or it does not meet the capacity restriction of the tier level.</description>
    </item>
    <item>
      <title>Order a performance storage (block/file)</title>
      <link>https://sldn.softlayer.com/python/order_performance_storage/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_performance_storage/</guid>
      <description>Important Note: There is a new version of storage devices (STaaS v2) so it is recomended to review Order Block/File storages with Managers Performance Block/File storage devices are under package 222 and they are differentiated by the complexType in the order template, being SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi for Block and SoftLayer_Container_Product_Order_Network_PerformanceStorage_Nfs for File storages.&#xA;These storage devices do not support snapshots, there is not any category name called storage_snapshot_space or similar in the package configuration, you can execute the following code to verify this last.</description>
    </item>
    <item>
      <title>Order Block/File Storages with Managers</title>
      <link>https://sldn.softlayer.com/python/order_block_file_storage_with_managers/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_block_file_storage_with_managers/</guid>
      <description>Order a Block Storage&#xA;The Block Storage Manager class provides different methods which can be used to order, cancel, list, etc., block storage devices, the following example shows how to order an endurance storage in an easy way and it can also be modified to order a performance type.&#xA;import SoftLayer from pprint import pprint client = SoftLayer.Client() block_mgr = SoftLayer.BlockStorageManager(client) storage_type = &amp;#39;endurance&amp;#39; # Set &amp;#39;performance&amp;#39; if you want this kind of storage location = &amp;#39;dal10&amp;#39; hourly = True size = 20 # Storage size (GB), minimum = 20 and maximum = 12000.</description>
    </item>
    <item>
      <title>Order an external authentication</title>
      <link>https://sldn.softlayer.com/python/order_external_auth/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_external_auth/</guid>
      <description>import SoftLayer import json class example(): def __init__(self): self.client = SoftLayer.Client() # Generate the order template used to place the order def _generateOrder(self, userId, keyName, package, credential=None): # Retrieve the package object in order to know its ID pkg_filter = {&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;: package}} package_list = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(filter=pkg_filter) package_id = package_list[0][&amp;#39;id&amp;#39;] # Retrive the available price of external auth item itm_filter = {&amp;#34;itemPrices&amp;#34;:{&amp;#34;item&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyName}}}} prices = self.client[&amp;#39;Product_Package&amp;#39;].getItemPrices(filter=itm_filter, id=package_id) # Build skeleton of order template orderTemplate = { &amp;#39;complexType&amp;#39;: &amp;#39;SoftLayer_Container_Product_Order_User_Customer_External_Binding&amp;#39;, &amp;#39;packageId&amp;#39;: package_id, &amp;#39;prices&amp;#39;:[{&amp;#39;id&amp;#39;: prices[0][&amp;#39;id&amp;#39;]}], &amp;#39;userId&amp;#39;: userId, &amp;#39;externalId&amp;#39;: credentialId } return orderTemplate def orderExternalAuth(self, userId, keyName, credential=None): # package used to order an External Auth.</description>
    </item>
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://sldn.softlayer.com/python/order_quote_advanced/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_quote_advanced/</guid>
      <description>Quotes Quotes are a way to save an order, and then easily duplicate the order later. You can create a quote from the control portal by going through the normal order process, and then instead of hitting &amp;ldquo;Order&amp;rdquo; at the end, there will be a button that says &amp;ldquo;Save Quote&amp;rdquo;, which will save the order for later. You can then use the quote service to pull down the information about it from the API.</description>
    </item>
    <item>
      <title>Ordering Vyatta Network Gateways</title>
      <link>https://sldn.softlayer.com/python/orderVyatta/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderVyatta/</guid>
      <description>This example goes over how to order a Single or HA vyatta with a bunch of optional settings. More context around ordering can be found in https://softlayer.github.io/python/orderBareMetal/ and https://softlayer.github.io/python/ordering_slcli/&#xA;import SoftLayer from SoftLayer.managers import ordering import sys from pprint import pprint as pp import logging logging.debug(&amp;#34;Starting up&amp;#34;) # Requires softlayer-python 5.4.3+ class vyattaOrderer(): def __init__(self): if SoftLayer.__version__ &amp;lt; &amp;#39;v5.4.3&amp;#39;: print(&amp;#34;SoftLayer needs to be 5.4.3+, is currently %s&amp;#34; % SoftLayer.__version__) self.client = SoftLayer.</description>
    </item>
    <item>
      <title>Understanding and building an order using the Softlayer order CLI</title>
      <link>https://sldn.softlayer.com/article/understanding-ordering/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/understanding-ordering/</guid>
      <description>In version 5.4.0 of softlayer-python, there is a new slcli command for placing IaaS cloud server orders using the API. This command can also be used to place orders for products that are normally ordered through the IBM Cloud infrastructure customer portal. There are multiple helpers to assist you in creating a specific order. In these examples, you will learn how to:&#xA;Build an order Understand the order structure Search for server packages Identify categories of items Verify the order Place the order Place an order programmatically using Python.</description>
    </item>
    <item>
      <title>VSI Flavors</title>
      <link>https://sldn.softlayer.com/article/vsiflavors/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/vsiflavors/</guid>
      <description>The introduction of Flavors to VSI ordering significantly changes how VSIs are ordered, and the old style of ordering will eventually become unsupported. This page will hopefully explain what changes need to be made to any scripts that order VSIs.&#xA;Support for flavors has been added to the SLCLI, so make sure you have at least version 5.4.0.&#xA;Getting a Flavor List SoftLayer_Virtual_Guest::getCreateObjectOptions is where you can find out the flavor listing, along with all other options you might want to supply to SoftLayer_Virtual_Guest::createObject</description>
    </item>
    <item>
      <title>Ordering with KeyNames</title>
      <link>https://sldn.softlayer.com/python/ordering_slcli/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/ordering_slcli/</guid>
      <description>Version 5.4.0 of the Softlayer-python project introducted some managers and CLI functions that greatly simplify the ordering processes via the api.&#xA;Building a package still requires a few steps however.&#xA;1. Find the package name slcli order package-list The most common packages are the following:&#xA;Description Package KeyName Package Type Additional Products ADDITIONAL_PRODUCTS ADDITIONAL_SERVICES Cloud Server CLOUD_SERVER VIRTUAL_SERVER_INSTANCE Network Gateway Appliance NETWORK_GATEWAY_APPLIANCE BARE_METAL_GATEWAY Load Balancers LOAD_BALANCERS ADDITIONAL_SERVICES_LOAD_BALANCER Bare Metal Server BARE_METAL_SERVER BARE_METAL_CPU_FAST_PROVISION POWER8 TULETA IBM_POWER_8 BARE_METAL_POWER_CPU Object Storage OBJECT_STORAGE ADDITIONAL_SERVICES_OBJECT_STORAGE Firewall FIREWALL ADDITIONAL_SERVICES_FIREWALL Storage As A Service (StaaS) STORAGE_AS_A_SERVICE_STAAS STORAGE_AS_A_SERVICE Load Balancer As A Service (LBaaS) LBAAS LOAD_BALANCER_AS_A_SERVICE Dedicated Host DEDICATED_HOST DEDICATED_HOST Public Virtual Server PUBLIC_CLOUD_SERVER VIRTUAL_SERVER_INSTANCE Once we have selected a package we need to find out where we can order this package.</description>
    </item>
    <item>
      <title>Order Server with RAID Config</title>
      <link>https://sldn.softlayer.com/java/OrderServerWithRaidConfig/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/OrderServerWithRaidConfig/</guid>
      <description>import java.math.BigDecimal; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.Hardware; import com.softlayer.api.service.container.product.order.storage.Group; import com.softlayer.api.service.container.product.order.storage.group.Partition; import com.softlayer.api.service.product.Order; import com.softlayer.api.service.product.item.Price; public class OrderWithDrivePartition { public static void main(String[] args) { String username = &amp;#34;set me&amp;#34;; String apiKey = &amp;#34;set me&amp;#34;; ApiClient client = new RestApiClient().withCredentials(username, apiKey); // Required values to place an order long quantity = 1; long packageId = 257; // Declare hostname, domain and network components of guests you want to order, add more // guest objects if quantity is greater than 1 List&amp;lt;Hardware&amp;gt; baremetals = new ArrayList&amp;lt;Hardware&amp;gt;(); Hardware server = new Hardware(); server.</description>
    </item>
    <item>
      <title>Ordering Raid</title>
      <link>https://sldn.softlayer.com/ruby/orderingRaid/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/orderingRaid/</guid>
      <description>As a SoftLayer user, you have probably seen the beautiful RAID Configurator that greets you when you order a server on the SoftLayer website.&#xA;It allows you to do anything you like, from a straight RAID configuration involving all drives in a single disk array, to a much more intricate configuration with nearly any mix of disks and RAID types.&#xA;However beautiful and practical the interface, sometimes you want to script this process, and the SoftLayer mantra of &amp;ldquo;Anything you can do in the Web interface, you can do on the API&amp;rdquo; also rings true in this case.</description>
    </item>
    <item>
      <title>Place quote order</title>
      <link>https://sldn.softlayer.com/ruby/order_quote/</link>
      <pubDate>Sat, 28 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/order_quote/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; # Credentials to the SoftLayer API are grabbed from the config file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 client = SoftLayer::Client.new QUOTE_ID = 1234 quote = client[&amp;#39;Billing_Order_Quote&amp;#39;].object_with_id(QUOTE_ID) order = quote.getRecalculatedOrderContainer[&amp;#39;orderContainers&amp;#39;][0] order[&amp;#39;quantity&amp;#39;] = 1 order[&amp;#39;virtualGuests&amp;#39;] = [{ &amp;#39;hostname&amp;#39; =&amp;gt; &amp;#39;quotetest&amp;#39;, &amp;#39;domain&amp;#39; =&amp;gt; &amp;#39;example.com&amp;#39; }] order.delete(&amp;#39;hardware&amp;#39;) pp client[&amp;#39;Product_Order&amp;#39;].placeOrder(order) </description>
    </item>
    <item>
      <title>Getting Started With User Data and Post Provisioning Scripts</title>
      <link>https://sldn.softlayer.com/blog/jarteche/getting-started-user-data-and-post-provisioning-scripts/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/blog/jarteche/getting-started-user-data-and-post-provisioning-scripts/</guid>
      <description>The SoftLayer platform lets you add dynamic data and scripts when you place your order. The scripts are executed after the machine is booted.&#xA;To place a script on a virtual server, the script must be available through a URL.&#xA;Note: For HTTP URLs, the script is injected in the server and manually executed. For HTTPS URLs, the script is injected and automatically executed.&#xA;In this article, we use https://x.x.x.x/ as the URL where the scripts are available and time.</description>
    </item>
    <item>
      <title>Place quote order</title>
      <link>https://sldn.softlayer.com/python/order_quote/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_quote/</guid>
      <description>import SoftLayer from pprint import pprint as pp quote_id = 12345 client = SoftLayer.Client() def getOrderContainer(quote_id): container = client[&amp;#39;Billing_Order_Quote&amp;#39;].getRecalculatedOrderContainer(id=quote_id) return container[&amp;#39;orderContainers&amp;#39;][0] def getQuotes(): quotes = client[&amp;#39;SoftLayer_Account&amp;#39;].getActiveQuotes() pp(quotes) getQuotes() guests = {&amp;#39;hostname&amp;#39;: &amp;#39;quotetest&amp;#39;, &amp;#39;domain&amp;#39;: &amp;#39;example.com&amp;#39;} container = getOrderContainer(quote_id) container[&amp;#39;quantity&amp;#39;] = 1 container[&amp;#39;virtualGuests&amp;#39;] = [] # You will need to add a hostname and domain entry for each server on the order # if quantity was 5, you would need to add 5 guests here container[&amp;#39;virtualGuests&amp;#39;].</description>
    </item>
  </channel>
</rss>
