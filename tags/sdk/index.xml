<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sdk on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/sdk/</link>
    <description>Recent content in Sdk on SoftLayer API</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/sdk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goroutines, Pagination and the SoftLayer API</title>
      <link>https://sldn.softlayer.com/go/goroutines/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/goroutines/</guid>
      <description>&lt;h1 id=&#34;basics-of-goroutines&#34;&gt;Basics of Goroutines&lt;/h1&gt;&#xA;&lt;p&gt;If you are unfamiliar with Goroutines, they are a way to easily add paralleism to your application. For a brief explanation on how they work in go, check out the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.to/gophers/what-are-goroutines-and-how-are-they-scheduled-2nj3&#34;&gt;What are goroutines and how are they scheduled?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://medium.com/technofunnel/understanding-golang-and-goroutines-72ac3c9a014d&#34;&gt;Understanding Golang and Goroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5Z8skvm4g64&#34;&gt;Goroutines Crash Course (Mutex, Channels, Wait Group, &amp;amp; More!)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Bk1c30avsuU&#34;&gt;https://www.youtube.com/watch?v=Bk1c30avsuU&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The basic pattern here will be to make a single api call to get the first set of results, but also the expected total number of results. From there we will use goroutines to create a thread for each needed API call, wait for them all to finish and collect the results.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
