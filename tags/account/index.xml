<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>account on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/account/</link>
    <description>Recent content in account on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/account/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with User Accounts</title>
      <link>https://sldn.softlayer.com/python/working_with_user_accounts/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/working_with_user_accounts/</guid>
      <description>Setup All the functions defined in this article will be part of this UserAccount class. Which only sets up the SoftLayer Client, and configures the debugger, which allows you to see the exact API calls being made.&#xA;import SoftLayer from SoftLayer.CLI import environment from SoftLayer.CLI import formatting from pprint import pprint class UserAccount: def __init__(self): self.client = SoftLayer.create_client_from_env() debugger = SoftLayer.DebugTransport(self.client.transport) self.user_customer_service = self.client[&amp;#39;User_Customer&amp;#39;] self.account_service = self.client[&amp;#39;Account&amp;#39;] self.user_customer_api_authentication_service = self.client[&amp;#39;User_Customer_ApiAuthentication&amp;#39;] self.</description>
    </item>
    <item>
      <title>Cancel all object storage swift</title>
      <link>https://sldn.softlayer.com/python/cancel_swift_object_storage.py/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/cancel_swift_object_storage.py/</guid>
      <description>List, delete, deleteAll Object Storage Swift Volumes This script do the following:&#xA;List all swift object storage volumes. Delete an object storage swift. Delete all object storage swift.&#xA;To run this script, you can use any terminal, Run the following python followed by the file.py:&#xA;c:&amp;gt; python cancel_object_storage.py&#xA;import SoftLayer import click from SoftLayer.CLI import exceptions from SoftLayer.utils import clean_time from prettytable import PrettyTable @click.group() def cli(): &amp;#34;&amp;#34;&amp;#34;Object Storage volumes.&amp;#34;&amp;#34;&amp;#34; @cli.</description>
    </item>
    <item>
      <title>CPU and Memory usage in Virtual servers</title>
      <link>https://sldn.softlayer.com/python/get_virtual_guest_usage_records/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/get_virtual_guest_usage_records/</guid>
      <description>This example will print out the average memory and CPU usage for a given time period for all virtual guests on your account.&#xA;Time Format Use the following time format for any requests. YYYY-MM-DDTHH:MM:SS or Epoch Time will work. These times are all tracked in CST, and the response will be in your users local timezone. When requesting data on day boundaries, your start time should be 00:00 and end time should be 23:59</description>
    </item>
    <item>
      <title>Working with placement groups</title>
      <link>https://sldn.softlayer.com/go/placement_group.go/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/placement_group.go/</guid>
      <description>Create Placement Group&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { // Create a session sess := session.New() // Get SoftLayer_Virtual_PlacementGroup service. service := services.GetVirtualPlacementGroupService(sess) // A Virtual_PlacementGroup template templateObject := datatypes.Virtual_PlacementGroup{ Name: sl.String(&amp;#34;test&amp;#34;), BackendRouterId: sl.Int(12345), RuleId: sl.Int(1), } // Get SoftLayer_Virtual_PlacementGroup service. receipt, err := service.CreateObject(&amp;amp;templateObject) if err != nil { fmt.Printf(&amp;#34;%s\n&amp;#34;, err) return } jsonFormat, jsonErr := json.MarshalIndent(receipt, &amp;#34;&amp;#34;, &amp;#34; &amp;#34;) if jsonErr !</description>
    </item>
    <item>
      <title>Working with placement groups</title>
      <link>https://sldn.softlayer.com/java/placementGroup.java/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/placementGroup.java/</guid>
      <description>Create Placement Group&#xA;import com.google.gson.Gson; import com.google.gson.GsonBuilder; import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.virtual.PlacementGroup; public class CreateVirtualPlacementGroup { public static void main(String []arg){ String username = &amp;#34;set me&amp;#34;; String apiKey = &amp;#34;set me&amp;#34;; PlacementGroup placement = new PlacementGroup(); placement.setName(&amp;#34;fotest&amp;#34;); placement.setBackendRouterId(11111L); placement.setRuleId(1L); ApiClient client = new RestApiClient().withCredentials(username, apiKey).withLoggingEnabled(); PlacementGroup.Service placementGroup = PlacementGroup.service(client); try { PlacementGroup result = placementGroup.createObject(placement); Gson gson = new GsonBuilder().setPrettyPrinting().create(); System.out.println(gson.toJson(result)); } catch (Exception e) { System.out.println(&amp;#34;Error: &amp;#34; + e); } } } Delete Placement Group</description>
    </item>
    <item>
      <title>RequestManualPayment.php</title>
      <link>https://sldn.softlayer.com/php/RequestManualPayment.php/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/RequestManualPayment.php/</guid>
      <description>&amp;lt;?php /** * Make a Payment * * This script makes a manual payment. Softlayer customers are permitted to request a manual * one-time payment at a minimum amount of $2.00. * * Important manual pages: * @see http://sldn.softlayer.com/reference/services/SoftLayer_Account/requestManualPayment * @see http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Payment_Card_ManualPayment * * @license &amp;lt;http://sldn.softlayer.com/article/License&amp;gt; * @author SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; */ require_once dirname(__FILE__) . &amp;#34;/SoftLayer/SoapClient.class.php&amp;#34;; /** * SoftLayer API username * @var string */ $username = &amp;#39;set me&amp;#39;; /** * SoftLayer API key * @var string */ $apiKey = &amp;#39;set me&amp;#39;; /** * Declare parameters for Payment Information * @var Decimal $amount */ $amount = 50.</description>
    </item>
    <item>
      <title>RequestManualPaymentUsingCreditCardOnFile.php</title>
      <link>https://sldn.softlayer.com/php/RequestManualPaymentUsingCreditCardOnFile.php/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/RequestManualPaymentUsingCreditCardOnFile.php/</guid>
      <description>&amp;lt;?php /** * This script makes a Manual Payment Request for a manual payment using a credit card which is on * file and does not require an approval process. * SoftLayer customers are permitted to request a manual one-time payment at a minimum amount of $2.00 * * Important manual pages: * @see http://sldn.softlayer.com/reference/services/SoftLayer_Account/requestManualPaymentUsingCreditCardOnFile * @see http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Payment_Card_ManualPayment * * @license &amp;lt;http://sldn.softlayer.com/article/License&amp;gt; * @author SoftLayer Technologies, Inc. &amp;lt;sldn@softlayer.com&amp;gt; */ require_once dirname(__FILE__) .</description>
    </item>
    <item>
      <title>Get disk usage metrics for a time range</title>
      <link>https://sldn.softlayer.com/go/account_disk_usage_metrics/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/account_disk_usage_metrics/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) func main() { // Create a session sess := session.New() // Account service has the method we need service := services.GetAccountService(sess) // Range: most recent 24 hours // // Time values are wrapped within an sl.Time type, to facilitate json marshaling tEnd := sl.Time(time.Now()) tStart := sl.Time(tEnd.AddDate(0, 0, -1)) data, err := service.GetDiskUsageMetricDataByDate(tStart, tEnd) if err != nil { log.</description>
    </item>
    <item>
      <title>Look up an SSH key</title>
      <link>https://sldn.softlayer.com/go/sshkey_lookup/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/sshkey_lookup/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; ) // The key to look up const label = &amp;#34;Test Public Key&amp;#34; func main() { sess := session.New() service := services.GetAccountService(sess) keys, err := service. Filter(filter.Build( filter.Path(&amp;#34;sshKeys.label&amp;#34;).Eq(label))). Mask(&amp;#34;id,label,key,fingerprint,notes&amp;#34;). GetSshKeys() if err != nil { log.Fatal(&amp;#34;Error retrieving SSH key: &amp;#34;, err) } if len(keys) == 0 { log.Fatal(&amp;#34;No ssh key found labeled &amp;#34;, label) } if len(keys) &amp;gt; 1 { log.Fatal(&amp;#34;More than one ssh key found labeled &amp;#34;, label) } key := keys[0] fmt.</description>
    </item>
  </channel>
</rss>
