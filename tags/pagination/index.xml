<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pagination on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/pagination/</link>
    <description>Recent content in pagination on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/pagination/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pagination Examples</title>
      <link>https://sldn.softlayer.com/python/pagination.py/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/pagination.py/</guid>
      <description>When querying the SoftLayer API and using a resultLimit to paginate your results, you should almost always use an OrderBy objectFilter to sort your results, as by default most results will not have an order imposed on them by the database. It is fairly common for the database to have differeing orders between queries UNLESS an OrderBy filter is used.&#xA;The python client itself has a built in function called iter_call which will return a python generator.</description>
    </item>
    <item>
      <title>Goroutines, Pagination and the SoftLayer API</title>
      <link>https://sldn.softlayer.com/go/goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/goroutines/</guid>
      <description>Basics of Goroutines If you are unfamiliar with Goroutines, they are a way to easily add paralleism to your application. For a brief explanation on how they work in go, check out the following:&#xA;What are goroutines and how are they scheduled? Understanding Golang and Goroutines Goroutines Crash Course (Mutex, Channels, Wait Group, &amp;amp; More!) https://www.youtube.com/watch?v=Bk1c30avsuU The basic pattern here will be to make a single api call to get the first set of results, but also the expected total number of results.</description>
    </item>
  </channel>
</rss>
