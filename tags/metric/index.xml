<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metric on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/metric/</link>
    <description>Recent content in metric on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/metric/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU and Memory usage in Virtual servers</title>
      <link>https://sldn.softlayer.com/java/UsageVirtualServer.java/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/java/UsageVirtualServer.java/</guid>
      <description>import com.softlayer.api.ApiClient; import com.softlayer.api.RestApiClient; import com.softlayer.api.service.container.bandwidth.GraphOutputs; import com.softlayer.api.service.container.metric.data.Type; import com.softlayer.api.service.metric.tracking.Object; import com.softlayer.api.service.metric.tracking.object.Data; import com.softlayer.api.service.virtual.Guest; import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.*; import java.text.ParseException; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.ZoneId; import java.time.format.DateTimeFormatter; import java.util.*; public class Usage { private Guest.Service guestService; private Object.Service trakingService; public Usage(Guest.Service guestService, Object.Service trakingService) { this.guestService = guestService; this.trakingService = trakingService; } public Map&amp;lt;String, Double&amp;gt; calculateAverages(List&amp;lt;Data&amp;gt; records) { Map&amp;lt;String, Double&amp;gt; total = new HashMap&amp;lt;&amp;gt;(); Map&amp;lt;String, Integer&amp;gt; totalCounter = new HashMap&amp;lt;&amp;gt;(); for (Data item : records) { if (!</description>
    </item>
    <item>
      <title>CPU and Memory usage in Virtual servers</title>
      <link>https://sldn.softlayer.com/php/UsageVirtualServer.php/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/UsageVirtualServer.php/</guid>
      <description>&amp;lt;?php require_once(dirname(__FILE__) . &amp;#39;/SoftLayer/SoapClient.class.php&amp;#39;); class VirtualServers { public $client_virtual; public $metric_trackingId; public $client_metric; function __construct($client_virtual,$client_metric) { $this-&amp;gt;client_virtual = $client_virtual; $this-&amp;gt;client_metric = $client_metric; } function _calculate_averages($records) { $total = array(); $total_counter = array(); foreach ($records as $item) { if (!isset($total[$item-&amp;gt;type])) { $total[$item-&amp;gt;type] = $item-&amp;gt;counter; $total_counter[$item-&amp;gt;type] = 1; } else { $item_counter_total = $total[$item-&amp;gt;type] + $item-&amp;gt;counter; $total[$item-&amp;gt;type] = $item_counter_total; $total_counter[$item-&amp;gt;type] = $total_counter[$item-&amp;gt;type] + 1; } } $average = array(); foreach ($total as $key =&amp;gt; $value) { $usage_counter = $value / $total_counter[$key]; $average[$key] = $usage_counter; } return $average; } function get_cpu_usage($start_date, $end_date) { $guest = $this-&amp;gt;client_virtual-&amp;gt;getObject(); $valid_types = array(); for ($i = 0; $i &amp;lt; $guest-&amp;gt;startCpus; $i++) { $valid_type = (object)array(&amp;#34;keyName&amp;#34; =&amp;gt; &amp;#34;CPU&amp;#34; .</description>
    </item>
    <item>
      <title>CPU and Memory usage in Virtual servers</title>
      <link>https://sldn.softlayer.com/python/get_virtual_guest_usage_records/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/get_virtual_guest_usage_records/</guid>
      <description>This example will print out the average memory and CPU usage for a given time period for all virtual guests on your account.&#xA;Time Format Use the following time format for any requests. YYYY-MM-DDTHH:MM:SS or Epoch Time will work. These times are all tracked in CST, and the response will be in your users local timezone. When requesting data on day boundaries, your start time should be 00:00 and end time should be 23:59</description>
    </item>
  </channel>
</rss>
