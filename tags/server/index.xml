<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/server/</link>
    <description>Recent content in server on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Aug 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trunking VLANs</title>
      <link>https://sldn.softlayer.com/python/vlanTagging/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/vlanTagging/</guid>
      <description>This example shows how to add VLAN Trunks to a server.&#xA;NOTE When trying to get the vlan tags/trunks from a server, the trunk information is on the Hardware_Server-&amp;gt;networkComponent-&amp;gt;uplinkComponent-&amp;gt;networkVlanTrunks relationship.&#xA;VLAN Trunks &amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo Adds specified Public and Private VLANs to a given server ID. Script requried Python 3.7+ click 8.0+ rich &amp;#34;&amp;#34;&amp;#34; # Click is used to make this script support CLI arguments import click # Used for details table output from rich.</description>
    </item>
    <item>
      <title>Hardware components and versions</title>
      <link>https://sldn.softlayer.com/python/hardware_components.py/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/hardware_components.py/</guid>
      <description>This python script contains the following:&#xA;1.- Getting hardware information.&#xA;2.- Getting the hardware components.&#xA;3.- Getting hardware components firmware version information.&#xA;4.- Updating the firmware on components.&#xA;import SoftLayer import click from prettytable import PrettyTable class HardwareComponents(): def __init__(self): self.client = SoftLayer.create_client_from_env() def hardware_information(self, hostname): &amp;#34;&amp;#34;&amp;#34; Get the Hardware Server Information. &amp;#34;&amp;#34;&amp;#34; mask = &amp;#39;mask[hardwareStatus,lastOperatingSystemReload,datacenter,billingItem[hourlyFlag],&amp;#39; \ &amp;#39;lastTransaction[transactionGroup],processorPhysicalCoreAmount,memoryCapacity,&amp;#39; \ &amp;#39;operatingSystem[softwareLicense[softwareDescription]]]&amp;#39; hardware_id = self.get_hardware_detail(hostname).get(&amp;#39;id&amp;#39;) result = self.client[&amp;#39;SoftLayer_Hardware_Server&amp;#39;].getObject(id=hardware_id, mask=mask) table = PrettyTable() table.</description>
    </item>
    <item>
      <title>List items for a Server Order</title>
      <link>https://sldn.softlayer.com/python/list_items_for_order_server.py/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/list_items_for_order_server.py/</guid>
      <description>This is an older article, the following might provide better instructions.&#xA;The Catalog SLCLI Ordering Basic and Advanced Ordering &amp;#34;&amp;#34;&amp;#34; List items to order device. The script displays the available data centers and items for a package. Note: The displayed prices are standard prices. &amp;#34;&amp;#34;&amp;#34; import SoftLayer package_id = 200 # Set True to see the hourly prices. # In case you see empty prices that means the item does not have an hourly price.</description>
    </item>
    <item>
      <title>Spare Pool Servers</title>
      <link>https://sldn.softlayer.com/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/spare_pool/</guid>
      <description>Operation: GET&#xA;Method: SoftLayer_Hardware_Server::sparepool()&#xA;Example CURL:&#xA;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add curl -su userid:api_key &amp;#34;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;#34; Will return True if the action was successful, or throw an exception otherwise&#xA;Exceptions:&#xA;This server (hostname.domain.name) is not in a status that allows it to be added to spare pool. This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool. The server is likely already in a spare pool.</description>
    </item>
    <item>
      <title>Reload with SSH keys</title>
      <link>https://sldn.softlayer.com/ruby/reloadWithSshhardware/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/reloadWithSshhardware/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) imageId = 1234567 sshKey1 = 876543 sshKey2 = 456789 serverId = 1154265 config = { &amp;#39;imageTemplateId&amp;#39;=&amp;gt; imageId, &amp;#39;sshKeyIds&amp;#39; =&amp;gt; [sshKey1, sshKey2] } setclient = client[&amp;#39;Hardware_Server&amp;#39;] reload = setclient.object_with_id(serverId).reloadOperatingSystem(&amp;#39;FORCE&amp;#39;, config) pp reload&#x9;</description>
    </item>
    <item>
      <title>Reload Server Examples</title>
      <link>https://sldn.softlayer.com/python/reload_hardware/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/reload_hardware/</guid>
      <description>This article covers a few ways to reload bare metal servers. This article is marked depreciated because of its use of Flex Image Templates, the other ways to reload operating systems are still valid.&#xA;List Flex Image Templates Flex Images are depreciated as of 8/7/2017. SoftLayer Product Lifecycle&#xA;Reloading a hardware server from an image template allows users to restore or reconfigure the server based off a pre-existing Flex Image Template that is associated with the account in use.</description>
    </item>
    <item>
      <title>Order Server with security software</title>
      <link>https://sldn.softlayer.com/php/orderBareMetal/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/orderBareMetal/</guid>
      <description>&amp;lt;?php require_once &amp;#39;./vendor/autoload.php&amp;#39;; class Example { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; } function getAllPackages() { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, null, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $packages = $packageClient-&amp;gt;getAllObjects(); print &amp;#34;ID -&amp;gt; Name \n&amp;#34;; foreach($packages as $package) { print $package-&amp;gt;id . &amp;#34; -&amp;gt; &amp;#34; . $package-&amp;gt;name . &amp;#34;\n&amp;#34;; } } function getPackageById($id=0, $onlyShow=0, $showPrices = 1) { $packageClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Product_Package&amp;#39;, $id, $this-&amp;gt;apiUsername, $this-&amp;gt;apiKey ); $package = $packageClient-&amp;gt;getItems(); print &amp;#34;ID, KeyName, Description \n&amp;#34;; foreach ($package as $item) { if ($onlyShow == 0 || $onlyShow == $item-&amp;gt;id) { print $item-&amp;gt;id .</description>
    </item>
  </channel>
</rss>
