<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>storage on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/storage/</link>
    <description>Recent content in storage on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Nov 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Network Storage</title>
      <link>https://sldn.softlayer.com/python/networkStorageExamples/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/networkStorageExamples/</guid>
      <description>import SoftLayer import time from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() debugger = SoftLayer.DebugTransport(self.client.transport) self.client.transport = debugger def main(self): block_manager = SoftLayer.BlockStorageManager(self.client) # This block will actually order storage, make sure to uncomment the other order block # order = block_manager.order_block_volume( # storage_type=&amp;#34;endurance&amp;#34;, # location=&amp;#39;dal13&amp;#39;, # size=100, # tier_level=float(4), # os_type=&amp;#39;LINUX&amp;#39;, # snapshot_size=None, # service_offering=&amp;#39;storage_as_a_service&amp;#39;, # hourly_billing_flag=True # ) # Used to test setting a note without actually placing an order # This is the basic structure returned from an order order = { &amp;#39;orderDate&amp;#39;: &amp;#39;2018-11-27T12:03:50-06:00&amp;#39;, &amp;#39;orderId&amp;#39;: 31323125, &amp;#39;placedOrder&amp;#39;: { &amp;#39;id&amp;#39;: 31323125, &amp;#39;items&amp;#39;: [ {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_as_a_service&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Storage as a Service&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_block&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;Block Storage&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;performance_storage_space&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;100 GBs&amp;#39;}, {&amp;#39;categoryCode&amp;#39;: &amp;#39;storage_tier_level&amp;#39;, &amp;#39;description&amp;#39;: &amp;#39;4 IOPS per GB&amp;#39;} ] } } if &amp;#39;placedOrder&amp;#39; in order: print(&amp;#34;OrderID: #{0}&amp;#34;.</description>
    </item>
    <item>
      <title>Order an endurance storage (block/file)</title>
      <link>https://sldn.softlayer.com/python/order_endurance_storage/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_endurance_storage/</guid>
      <description>Important Note: There is a new version of storage devices (STaaS v2) so it is recomended to review Order Block/File storages with Managers Endurance Block/File storage devices are under package 240, the complexType is SoftLayer_Container_Product_Order_Network_Storage_Enterprise for both of them have in the order template.&#xA;**Tips before ordering** In most of the cases the order verification fails whether the selected price cannot be ordered in the selected location or it does not meet the capacity restriction of the tier level.</description>
    </item>
    <item>
      <title>Order a performance storage (block/file)</title>
      <link>https://sldn.softlayer.com/python/order_performance_storage/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_performance_storage/</guid>
      <description>Important Note: There is a new version of storage devices (STaaS v2) so it is recomended to review Order Block/File storages with Managers Performance Block/File storage devices are under package 222 and they are differentiated by the complexType in the order template, being SoftLayer_Container_Product_Order_Network_PerformanceStorage_Iscsi for Block and SoftLayer_Container_Product_Order_Network_PerformanceStorage_Nfs for File storages.&#xA;These storage devices do not support snapshots, there is not any category name called storage_snapshot_space or similar in the package configuration, you can execute the following code to verify this last.</description>
    </item>
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://sldn.softlayer.com/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/EnduranceReplication/</guid>
      <description>Some good starting reading.&#xA;https://knowledgelayer.softlayer.com/procedure/endurance-replication https://knowledgelayer.softlayer.com/procedure/endurance-snapshots http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots For more information on the magic of storage ordering see the following&#xA;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering&#xA;TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in&#xA;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/ Graceful vs Immediate failover&#xA;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant Failback is always immediate.</description>
    </item>
    <item>
      <title>Create a snapshot schedule</title>
      <link>https://sldn.softlayer.com/python/enableSnapshots/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/enableSnapshots/</guid>
      <description>This method is not valid for Legacy iSCSI Storage Volumes. You need to have already purchased snapshot space for the script to work properly.&#xA;import SoftLayer client = SoftLayer.Client() storageId = 11657445 # Define parameters for snapshot scheduleType = &amp;#39;WEEKLY&amp;#39; retentionCount = &amp;#39;20&amp;#39; minute = &amp;#39;1&amp;#39; hour = &amp;#39;13&amp;#39; dayOfWeek = &amp;#39;SUNDAY&amp;#39; try: result = client[&amp;#39;SoftLayer_Network_Storage&amp;#39;].enableSnapshots(scheduleType, retentionCount, minute, hour, dayOfWeek, id=storageId) print (result) except SoftLayer.SoftLayerAPIError as e: print(&amp;#34;Error: &amp;#34; % (e.</description>
    </item>
    <item>
      <title>Create Storage Snapshot</title>
      <link>https://sldn.softlayer.com/python/createSnapshot/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/createSnapshot/</guid>
      <description>Trigger a manual snapshot creation of a Block storage volume.&#xA;import SoftLayer import json iscsiStorageId = 8744521 client = SoftLayer.create_client_from_env() networkStorageIscsiService = client[&amp;#39;SoftLayer_Network_Storage_Iscsi&amp;#39;] try: iscsiStorage = networkStorageIscsiService.createSnapshot(id=iscsiStorageId) print(json.dumps(iscsiStorage, sort_keys=True, indent=2, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;))) except SoftLayer.SoftLayerAPIError as e: print(&amp;#34;Unable to retrieve the Network Storage Iscsi. faultCode=%s, faultString=%s&amp;#34; % (e.faultCode, e.faultString)) The process can take sometime to complete. You can check the snapshots associated with a storage volume by using the code below:</description>
    </item>
    <item>
      <title>Interact with SoftLayer Object Storage</title>
      <link>https://sldn.softlayer.com/fog/storage/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/fog/storage/</guid>
      <description>Create a connection to SoftLayer Object Storage require &amp;#39;fog/softlayer&amp;#39; @sl = Fog::Storage[:softlayer] Use the Models List directories/containers.&#xA;dirs = @sl.directories dirs.size # the number of directories Create a directory/container.&#xA;@sl.directories.create(:key =&amp;gt; &amp;#39;a-container&amp;#39;) Get a directory/container&#xA;dir = @sl.directories.get(&amp;#39;a-container&amp;#39;) dir.key # =&amp;gt; &amp;#39;a-container&amp;#39; Create a new file/object&#xA;dir = @sl.directories.get(&amp;#39;a-container&amp;#39;) # Pass a string. dir.files.create(:key =&amp;gt; &amp;#39;data.txt&amp;#39;, :body =&amp;gt; &amp;#39;The quick brown fox jumps over the lazy dog.&amp;#39;) # From a file.</description>
    </item>
  </channel>
</rss>
