<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>objectfilter on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/objectfilter/</link>
    <description>Recent content in objectfilter on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/objectfilter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Threads for improved API performance</title>
      <link>https://sldn.softlayer.com/python/mtSpeedup/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/mtSpeedup/</guid>
      <description>Basic of Threads If you are unfamiliar with Threads, these examples will use the concurrent.futures library within python (available after python3.2) which is fairly simple to get setup. I wont really go over HOW it works on a technical level, only how to best use it threads to improve performance when making SoftLayer API requests.&#xA;For some technical details on how python handles Threads the following are good reading on the topic</description>
    </item>
    <item>
      <title>More Bare Metal Server examples</title>
      <link>https://sldn.softlayer.com/go/server.go/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/server.go/</guid>
      <description>A few examples on interacting with Bare Metal Server, SoftLayer_Hardware_Server.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/terminal&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/datatypes&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/filter&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/services&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/session&amp;#34; &amp;#34;github.com/softlayer/softlayer-go/sl&amp;#34; ) // Session created using values set in the environment, or from the local configuration file (i.e. ~/.softlayer). var sess = session.New() type Dictionary map[string]string func main() { // Shows all servers in the account. listServers() // Shows all available packages to order/create a Bare Metal server. listServerPackages() // Shows just fast provision packages to order/create a Bare Metal server.</description>
    </item>
    <item>
      <title>Event Logs</title>
      <link>https://sldn.softlayer.com/go/event_log.go/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/go/event_log.go/</guid>
      <description>This example deals with a few ways of pulling data from SoftLayer_Event_Log. There can be quite a few Logs here, therefore it is recommended to use a filter like in getRecentLogs to limit how far back your search for Events, otherwise you will be paging through Events for a long time. Moreover, this example uses the maxNumberOfEvents value to limit the number of event logs that will be retrieved.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.</description>
    </item>
    <item>
      <title>Working with Event Logs</title>
      <link>https://sldn.softlayer.com/rest/events_logs/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/events_logs/</guid>
      <description>Event Log This example deals with a few ways of pulling data from SoftLayer_Event_Log. There can be quite a few Logs here, so using a filter it recommends like in the Get Recent Events to limit how far back your search for Events, otherwise you will be paging through Events for a long time.&#xA;Get All Events To get all Events logs, We use SoftLayer_Event_Log::getAllObjects(), in this case just the first 50 events by using pagination as resultLimit=0,50, See Using Result Limits in the SoftLayer API.</description>
    </item>
    <item>
      <title>Advanced Bare Metal Server Ordering</title>
      <link>https://sldn.softlayer.com/python/orderBareMetal/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/orderBareMetal/</guid>
      <description>Example of how to build an order for a bare metal server.&#xA;Find the package that you want to order. listServerPackages() will filter out all that are not bare metal servers Use getServerPrices() to find the item keyNames you want to include in your order. These price IDs can be included prices array directly, but I&amp;rsquo;ve included gatherPriceIds() to match up KeyNames to build a list of price ids. getServerPrices() will also show the locations available for ordering.</description>
    </item>
    <item>
      <title>Event Logs</title>
      <link>https://sldn.softlayer.com/python/event_log/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/event_log/</guid>
      <description>This example deals with a few ways of pulling data from SoftLayer_Event_Log. There can ben quite a few Logs here, so I recommend using a filter like in the recentLogs function to limit how far back you search for Events, otherwise you will be paging through Events for a long time.&#xA;&amp;#34;&amp;#34;&amp;#34; @author Christopher Gallo &amp;#34;&amp;#34;&amp;#34; import datetime import SoftLayer class example(): def __init__(self): self.client = SoftLayer.Client() debugger = SoftLayer.DebugTransport(self.client.transport) self.</description>
    </item>
    <item>
      <title>Tickets</title>
      <link>https://sldn.softlayer.com/rest/tickets/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/tickets/</guid>
      <description>Tickets Tickets are how SoftLayer and you communicate and resolve problems. They can be about anything from general questions, requests for upgrades, monitoring alerts, or anything else that might come up.&#xA;Viewing Tickets To start off, lets see how to go about getting tickets that already exist on our account. There are a variety of helper functions on the SoftLayer_Account service that deal with tickets, and they all work basically the same way.</description>
    </item>
    <item>
      <title>Events</title>
      <link>https://sldn.softlayer.com/rest/events/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/events/</guid>
      <description>Events SoftLayer_Notification_Occurrence_Events at SoftLayer are how we communicate maintenance, outages, and other disruptive events to customers. In the control portal, you can find these at https://control.softlayer.com/event/announcement&#xA;Get All Events SoftLayer_Notification_Occurrence_Event::getAllObjects()&#xA;curl -u $SL_USER:$SL_APIKEY &amp;#34;https://api.softlayer.com/rest/v3.1/SoftLayer_Notification_Occurrence_Event/getAllObjects.json The output will look something like this, but will have every event that has ever been reported on your account. For brevity I have only included 1 Event&#xA;[ { &amp;#34;endDate&amp;#34;: null, &amp;#34;id&amp;#34;: 2584, &amp;#34;lastImpactedUserCount&amp;#34;: 11232, &amp;#34;modifyDate&amp;#34;: &amp;#34;2016-06-13T08:27:20-06:00&amp;#34;, &amp;#34;recoveryTime&amp;#34;: null, &amp;#34;startDate&amp;#34;: &amp;#34;2014-03-31T00:35:00-06:00&amp;#34;, &amp;#34;statusCode&amp;#34;: { &amp;#34;keyName&amp;#34;: &amp;#34;COMPLETED&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Completed&amp;#34; }, &amp;#34;subject&amp;#34;: &amp;#34;IPv6 Sessions Down on FCR02.</description>
    </item>
    <item>
      <title>Spare Pool Servers</title>
      <link>https://sldn.softlayer.com/rest/spare_pool/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/rest/spare_pool/</guid>
      <description>Operation: GET&#xA;Method: SoftLayer_Hardware_Server::sparepool()&#xA;Example CURL:&#xA;curl -su userid:api_key https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparepool/add curl -su userid:api_key &amp;#34;https://api.softlayer.com/rest/v3/SoftLayer_Hardware_Server/&amp;lt;hardware_id&amp;gt;/sparePool/activate&amp;#34; Will return True if the action was successful, or throw an exception otherwise&#xA;Exceptions:&#xA;This server (hostname.domain.name) is not in a status that allows it to be added to spare pool. This server (hostname.domain.name) is not in a status that allows it to be removed from spare pool. The server is likely already in a spare pool.</description>
    </item>
    <item>
      <title>Provision Times</title>
      <link>https://sldn.softlayer.com/python/provisionTimes/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/provisionTimes/</guid>
      <description>Goes through orders and prints out each transaction that provisioned a server or virtual server. Calculates provision time from the time the order was placed, till the time the transaction went to COMPLETE.&#xA;Order: 15866609 - 2017-06-09T10:42:04-06:00 FQDN, Status, transaction id, elapsed time sgtest.cdetest.info, COMPLETE, 57090965, 383.0 Order: 15861187 - 2017-06-09T09:07:49-06:00 FQDN, Status, transaction id, elapsed time jumpbox.cdetest.info, COMPLETE, 57080823, 774.0 Order: 15860993 - 2017-06-09T08:53:22-06:00 FQDN, Status, transaction id, elapsed time Order: 15853891 - 2017-06-09T04:47:32-06:00 FQDN, Status, transaction id, elapsed time d1.</description>
    </item>
    <item>
      <title>Get bills by user</title>
      <link>https://sldn.softlayer.com/python/billsByUser/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/billsByUser/</guid>
      <description>This is a rough script, it doesn&amp;rsquo;t include some of the tax fees and some of the other one off fee fields that you will find in http://sldn.softlayer.com/reference/datatypes/SoftLayer_Billing_Item&#xA;Example Output for billsByUser()&#xA;chris-cde - 840.0 123.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $345.0 234.cdetesting.com : Dual Intel Xeon E5-2620 v3 (12 Cores, 2.40 GHz) $495.0 chris.testing.com : 2 x 2.0 GHz Cores $0.0 4 Portable Private IP Addresses - $0.</description>
    </item>
    <item>
      <title>Get Notifications</title>
      <link>https://sldn.softlayer.com/ruby/getNotifications/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/getNotifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.&#xA;require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; client = SoftLayer::Client.new(:timeout =&amp;gt; 120) theDate = &amp;#39;01/01/2017 01:00:00&amp;#39; theFilter = { &amp;#39;startDate&amp;#39;=&amp;gt; { &amp;#39;operation&amp;#39;=&amp;gt; &amp;#39;greaterThanDate&amp;#39;, &amp;#39;options&amp;#39;=&amp;gt; [ {&amp;#39;name&amp;#39;=&amp;gt; &amp;#39;date&amp;#39;, &amp;#39;value&amp;#39; =&amp;gt; [theDate]} ] } } getresults = client[&amp;#39;SoftLayer_Notification_Occurrence_Event&amp;#39;].getAllObjects(filter=theFilter) pp getresults </description>
    </item>
    <item>
      <title>Endurance Storage Replication</title>
      <link>https://sldn.softlayer.com/python/EnduranceReplication/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/EnduranceReplication/</guid>
      <description>Some good starting reading.&#xA;https://knowledgelayer.softlayer.com/procedure/endurance-replication https://knowledgelayer.softlayer.com/procedure/endurance-snapshots http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/enableSnapshots For more information on the magic of storage ordering see the following&#xA;https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/file.py https://github.com/softlayer/softlayer-python/blob/master/SoftLayer/managers/storage_utils.py This example should touch on all the basics of dealing with endurance storage replication volumes. This example uses the SoftLayer-python File manager a little bit for ordering&#xA;TO authorize hosts that are NOT virtual guests, see the allowAccessFrom* methods in&#xA;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/ Graceful vs Immediate failover&#xA;http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/immediateFailoverToReplicant http://sldn.softlayer.com/reference/services/SoftLayer_Network_Storage/failoverToReplicant Failback is always immediate.</description>
    </item>
    <item>
      <title>Bandwidth Pools</title>
      <link>https://sldn.softlayer.com/python/bandwidthPoolsAndSubnets/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/bandwidthPoolsAndSubnets/</guid>
      <description>VDR SoftLayer allotments are a collection of servers that share all of the servers allocated bandwidth together.&#xA;This example below lists a few of the common ways of interacting with Bandwidth pools/allotments/Virtual Dedicated Racks.&#xA;import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() debugger = SoftLayer.DebugTransport(self.client.transport) self.client.transport = debugger def getPublicSubnets(self): &amp;#34;&amp;#34;&amp;#34; subnet types SECONDARY_ON_VLAN = Portable IPs PRIMARY SUBNET_ON_VLAN = static subnets PRIMARY_6 STATIC_IP_ROUTED GLOBAL_IP ADDITIONAL_PRIMARY &amp;#34;&amp;#34;&amp;#34; object_filter = { &amp;#39;publicSubnets&amp;#39; : { &amp;#39;subnetType&amp;#39; : { &amp;#39;operation&amp;#39;: &amp;#39;SECONDARY_ON_VLAN&amp;#39; } } } subnets = self.</description>
    </item>
    <item>
      <title>Get a list of Virtual Guests and Bare Metal servers per Pod in a Datacenter</title>
      <link>https://sldn.softlayer.com/python/listByPod/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/listByPod/</guid>
      <description>import SoftLayer import pprint from prettytable import PrettyTable client = SoftLayer.Client() # Define datacenter e.g: dal05, dal09, ams01, sao01, etc datacenter = &amp;#39;dal10&amp;#39; # Declare a new API service objects for SoftLayer_Account accountClient = client[&amp;#39;SoftLayer_Account&amp;#39;] # Define objectMask and objectFilters to get additional information objectMask = &amp;#39;mask[primaryNetworkComponent[router[hostname]]]&amp;#39; objectFilterBms = {&amp;#34;hardware&amp;#34;: {&amp;#34;datacenter&amp;#34;: {&amp;#34;name&amp;#34;: {&amp;#34;operation&amp;#34;: datacenter}}}} objectFilterVsi = {&amp;#34;virtualGuests&amp;#34;: {&amp;#34;datacenter&amp;#34;: {&amp;#34;name&amp;#34;: {&amp;#34;operation&amp;#34;: datacenter}}}} # Define array to add pods pods = [] try: # Getting servers and vsis servers = accountClient.</description>
    </item>
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://sldn.softlayer.com/ruby/getLocationPricing/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/getLocationPricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. In the following example we will query for the Dallas 10 data center for SoftLayer Virtual Guests.&#xA;require &amp;#39;softlayer_api&amp;#39; require &amp;#39;pp&amp;#39; client = SoftLayer::Client.</description>
    </item>
    <item>
      <title>Find Location specific pricing for a package</title>
      <link>https://sldn.softlayer.com/python/location_based_pricing/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/location_based_pricing/</guid>
      <description>With the introduction to Location-based Pricing, we updated our pricing model to represent the costs in each data center more clearly. Instead of adding premiums to a base server price, we have priced servers and services in each data center with their own location-based SoftLayer_Product_Item_Price objects via the API. In the following example we will query for the Dallas 6 data center, and then filter our item (Local Load Balancer) and prices to include only the location-based pricing for the specific data center we&amp;rsquo;re in —or we can filter for the standard price if a location-based price doesn&amp;rsquo;t exist.</description>
    </item>
    <item>
      <title>Get Notifications</title>
      <link>https://sldn.softlayer.com/python/notifications/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/notifications/</guid>
      <description>Retrieves all notifications that were created on January 1, 2016.&#xA;import SoftLayer from pprint import pprint as pp class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): theDate = &amp;#39;01/01/2016 01:00:00&amp;#39; _filter = { &amp;#39;startDate&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;greaterThanDate&amp;#39;, &amp;#39;options&amp;#39;: [ {&amp;#39;name&amp;#39;: &amp;#39;date&amp;#39;, &amp;#39;value&amp;#39;: [theDate]} ] } } result = self.client[&amp;#39;SoftLayer_Notification_Occurrence_Event&amp;#39;].getAllObjects(filter=_filter) pp(result) if __name__ == &amp;#34;__main__&amp;#34;: main = example() main.main() </description>
    </item>
    <item>
      <title>Get tickets using an objectFilter</title>
      <link>https://sldn.softlayer.com/python/ticket_filter/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/ticket_filter/</guid>
      <description>import SoftLayer from pprint import pprint as pp import logging class example(): def __init__(self): self.client = SoftLayer.Client() def main(self): # logger = logging.getLogger() # logger.addHandler(logging.StreamHandler()) # logger.setLevel(3) theDate = &amp;#34;02/25/2016 01:00:00&amp;#34; endDate = &amp;#34;02/29/2016 01:00:00&amp;#34; mask = &amp;#34;mask[updates,group[name]]&amp;#34; theFilter1 = { &amp;#39;tickets&amp;#39;: { &amp;#39;createDate&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;betweenDate&amp;#39;, &amp;#39;options&amp;#39;: [ {&amp;#39;name&amp;#39;: &amp;#39;startDate&amp;#39;, &amp;#39;value&amp;#39;: [theDate]}, {&amp;#39;name&amp;#39;: &amp;#39;endDate&amp;#39;, &amp;#39;value&amp;#39;: [endDate]} ] } } } theFilter2 = { &amp;#39;tickets&amp;#39;: { &amp;#39;createDate&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;greaterThanDate&amp;#39;, &amp;#39;options&amp;#39;: [ {&amp;#39;name&amp;#39;: &amp;#39;date&amp;#39;, &amp;#39;value&amp;#39;: [theDate]} ] }, &amp;#39;group&amp;#39; : { &amp;#39;name&amp;#39;: { &amp;#39;operation&amp;#39;: &amp;#39;Cancellations&amp;#39; } } } } result = self.</description>
    </item>
    <item>
      <title>Determining SoftLayer Device Owners</title>
      <link>https://sldn.softlayer.com/ruby/determining_device_owners/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/determining_device_owners/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; require &amp;#39;vine&amp;#39; require &amp;#39;pp&amp;#39; # Credentials to the API are read from a configuration file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 client = SoftLayer::Client.new billing = client[&amp;#39;Account&amp;#39;] object_mask = &amp;#39;mask[fullyQualifiedDomainName,billingItem[categoryCode,description,createDate,orderItem[order[userRecord[username]]]]]&amp;#39; hardware_list = billing.object_mask(object_mask).getHardware virtual_guest_list = billing.object_mask(object_mask).getVirtualGuests def describe(item) domain_name = item.access(&amp;#39;fullyQualifiedDomainName&amp;#39;) || &amp;#39;no fullyQualifiedDomainName&amp;#39; category_code = item.access(&amp;#39;billingItem.categoryCode&amp;#39;) || &amp;#39;no categoryCode&amp;#39; description = item.access(&amp;#39;billingItem.description&amp;#39;) || &amp;#39;no description&amp;#39; create_date = item.access(&amp;#39;billingItem.createDate&amp;#39;) || &amp;#39;no createDate&amp;#39; user_name = item.access(&amp;#39;billingItem.orderItem.order.userRecord.username&amp;#39;) || &amp;#39;no username&amp;#39; return &amp;#34;&amp;#39;#{domain_name}&amp;#39;, category code: &amp;#39;#{category_code}&amp;#39;, &amp;#34;\ &amp;#34;description: &amp;#39;#{description}&amp;#39;, was created by: &amp;#39;#{user_name}&amp;#39; &amp;#34;\ &amp;#34;on &amp;#39;#{create_date}&amp;#39;&amp;#34; end for item in hardware_list do puts &amp;#34;Hardware &amp;#34; + describe(item) end for item in virtual_guest_list do puts &amp;#34;Virtual Guest &amp;#34; + describe(item) end </description>
    </item>
    <item>
      <title>Object-Filters</title>
      <link>https://sldn.softlayer.com/article/object-filters/</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/article/object-filters/</guid>
      <description>Overview slides&#xA;Object filters can be used to limit the results returned by the API. They differ from objectMasks in that they determine which objects are returned while objectMasks define what properties to retrieve from the returned objects.&#xA;Structure An object filter is created by defining a property hierarchy through the relational and local properties. The property to be filtered will be a structure that represents the object filters conditional.</description>
    </item>
    <item>
      <title>Get top level billing items for all owned accounts</title>
      <link>https://sldn.softlayer.com/php/get_invoice_top_level_items/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/get_invoice_top_level_items/</guid>
      <description>With a given date range, get all the invoice details for all of the owned brands, and all of their owned accounts. The $filter can be used to get just a single accounts invoices, just take off the -&amp;gt;allOwnedAccounts bits&#xA;&amp;lt;?php require_once __DIR__.&amp;#39;/vendor/autoload.php&amp;#39;; /** * This class structure is mostly used so this can be run as a script. * Most of the print statements use fancy bash color codes to make things pretty */ class topBillingItems { function __construct() { $this-&amp;gt;apiUsername = &amp;#39;&amp;#39;; $this-&amp;gt;apiKey = &amp;#39;&amp;#39;; $this-&amp;gt;startDate = new DateTime(&amp;#39;2015-02-12T00:00:00&amp;#39;, new DateTimeZone(&amp;#39;CST&amp;#39;)); $this-&amp;gt;endDate = new DateTime(&amp;#39;2015-03-12T00:00:00&amp;#39;, new DateTimeZone(&amp;#39;CST&amp;#39;)); } /*!</description>
    </item>
    <item>
      <title>Get Invoices</title>
      <link>https://sldn.softlayer.com/php/get_invoice/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/php/get_invoice/</guid>
      <description>&amp;lt;?php require_once __DIR__.&amp;#39;/vendor/autoload.php&amp;#39;; $apiUser = &amp;#39;&amp;#39;; $key = &amp;#39;&amp;#39;; //The date does need to be in this specific format $startDate = new DateTime(&amp;#39;2014-11-01T13:05:25&amp;#39;, new DateTimeZone(&amp;#39;CST&amp;#39;)); $endDate = new DateTime(&amp;#39;2014-12-01T09:53:51&amp;#39;, new DateTimeZone(&amp;#39;CST&amp;#39;)); $accountClient = \SoftLayer\SoapClient::getClient(&amp;#39;SoftLayer_Account&amp;#39;, null, $apiUser, $key); $filter = new stdClass(); $filter-&amp;gt;invoices = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId = new stdClass(); // $filter-&amp;gt;invoices-&amp;gt;accountId-&amp;gt;operation = &amp;#39;= 391780&amp;#39;; $filter-&amp;gt;invoices-&amp;gt;createDate = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;operation = &amp;#39;betweenDate&amp;#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options = array(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;name = &amp;#39;startDate&amp;#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[0]-&amp;gt;value = array($startDate-&amp;gt;format(&amp;#39;m/d/Y H:i:s&amp;#39;)); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1] = new stdClass(); $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;name = &amp;#39;endDate&amp;#39;; $filter-&amp;gt;invoices-&amp;gt;createDate-&amp;gt;options[1]-&amp;gt;value = array($endDate-&amp;gt;format(&amp;#39;m/d/Y H:i:s&amp;#39;)); $objectMask = new \SoftLayer\Common\ObjectMask(); $objectMask-&amp;gt;invoices; $accountClient-&amp;gt;setObjectFilter($filter); $accountClient-&amp;gt;setObjectMask($objectMask); $invoices = $accountClient-&amp;gt;getObject(); print_r($invoices); ?</description>
    </item>
    <item>
      <title>Server Locate</title>
      <link>https://sldn.softlayer.com/ruby/server_locate/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/ruby/server_locate/</guid>
      <description>require &amp;#39;softlayer_api&amp;#39; # gem install softlayer_api require &amp;#39;table_print&amp;#39; # gem install table_print # Credentials to the SoftLayer API are grabbed from the config file by default. # See https://github.com/softlayer/softlayer-ruby/blob/master/lib/softlayer/Config.rb#L11-L44 SoftLayer::Client.default_client = SoftLayer::Client.new servers = SoftLayer::VirtualServer.find_servers(object_mask: &amp;#39;mask[location.pathString]&amp;#39;) location_info = servers.map do |server| datacenter, server_room, rack, slot = server[&amp;#39;location&amp;#39;][&amp;#39;pathString&amp;#39;].split(&amp;#39;.&amp;#39;) { server: server.fullyQualifiedDomainName, data_center: datacenter, server_room: server_room, rack: rack, slot: slot } end tp location_info </description>
    </item>
  </channel>
</rss>
