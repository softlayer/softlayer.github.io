<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Provisionscripts on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/provisionscripts/</link>
    <description>Recent content in Provisionscripts on SoftLayer API</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Aug 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/provisionscripts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advanced Quote Ordering</title>
      <link>https://sldn.softlayer.com/python/order_quote_advanced/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_quote_advanced/</guid>
      <description>&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;&#xA;&lt;p&gt;Quotes are a way to save an order, and then easily duplicate the order later. You can create a quote from the control portal by going through the normal order process, and then instead of hitting &amp;ldquo;Order&amp;rdquo; at the end, there will be a button that says &amp;ldquo;Save Quote&amp;rdquo;, which will save the order for later. You can then use the quote service to pull down the information about it from the API. &lt;code&gt;listQuotes&lt;/code&gt; in the example below does exactly this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started With User Data and Post Provisioning Scripts</title>
      <link>https://sldn.softlayer.com/blog/jarteche/getting-started-user-data-and-post-provisioning-scripts/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/blog/jarteche/getting-started-user-data-and-post-provisioning-scripts/</guid>
      <description>&lt;p&gt;The SoftLayer platform lets you add dynamic data and scripts when you place your order.  The scripts are executed after the machine is booted.&lt;/p&gt;&#xA;&lt;p&gt;To place a script on a virtual server, the script must be available through a URL.&lt;/p&gt;&#xA;&lt;p&gt;Note: For HTTP URLs, the script is injected in the server and manually executed. For HTTPS URLs, the script is injected and automatically executed.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we use &lt;em&gt;&lt;a href=&#34;https://x.x.x.x/&#34;&gt;https://x.x.x.x/&lt;/a&gt;&lt;/em&gt; as the URL where the scripts are available and &lt;em&gt;time.sh&lt;/em&gt; as the script. If you place the URL on the browser, the result should be:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
