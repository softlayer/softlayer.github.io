<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>user on SoftLayer API</title>
    <link>https://sldn.softlayer.com/tags/user/</link>
    <description>Recent content in user on SoftLayer API</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sldn.softlayer.com/tags/user/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with User Accounts</title>
      <link>https://sldn.softlayer.com/python/working_with_user_accounts/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/working_with_user_accounts/</guid>
      <description>Setup All the functions defined in this article will be part of this UserAccount class. Which only sets up the SoftLayer Client, and configures the debugger, which allows you to see the exact API calls being made.&#xA;import SoftLayer from SoftLayer.CLI import environment from SoftLayer.CLI import formatting from pprint import pprint class UserAccount: def __init__(self): self.client = SoftLayer.create_client_from_env() debugger = SoftLayer.DebugTransport(self.client.transport) self.user_customer_service = self.client[&amp;#39;User_Customer&amp;#39;] self.account_service = self.client[&amp;#39;Account&amp;#39;] self.user_customer_api_authentication_service = self.client[&amp;#39;User_Customer_ApiAuthentication&amp;#39;] self.</description>
    </item>
    <item>
      <title>Role Examples</title>
      <link>https://sldn.softlayer.com/python/role_examples/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/role_examples/</guid>
      <description>In order to create the roles and assign them the permissions these are the steps you could to follow:&#xA;Working with roles Create a Role Create a Group Assign actions to the Group Link the Group to the Role Add user to the Role Adding resources Edit Role Delete Role Working with Roles Step 1: Create a Role from pprint import pprint import SoftLayer templateObject = { &amp;#34;name&amp;#34;: &amp;#34;name role&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;test user permission role&amp;#34; } client = SoftLayer.</description>
    </item>
    <item>
      <title>Working with user permissions</title>
      <link>https://sldn.softlayer.com/python/user_customer_permissions.py/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/user_customer_permissions.py/</guid>
      <description>Create a User Permission Role&#xA;import json from pprint import pprint as pp import SoftLayer templateObject = { &amp;#34;name&amp;#34;: &amp;#34;name role&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;test user permission role&amp;#34; } client = SoftLayer.create_client_from_env() try: createRole = client[&amp;#39;User_Permission_Role&amp;#39;].createObject(templateObject) print(json.dumps(createRole, sort_keys=True, indent=2, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;))) except SoftLayer.SoftLayerAPIError as e: pp(&amp;#39;Unable to create a user permission role faultCode=%s, faultString=%s&amp;#39; % (e.faultCode, e.faultString)) Create a User Permission Group&#xA;import json from pprint import pprint as pp import SoftLayer templateObject = { &amp;#34;name&amp;#34;: &amp;#34;name group&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;test group&amp;#34; } client = SoftLayer.</description>
    </item>
    <item>
      <title>Order an external authentication</title>
      <link>https://sldn.softlayer.com/python/order_external_auth/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://sldn.softlayer.com/python/order_external_auth/</guid>
      <description>import SoftLayer import json class example(): def __init__(self): self.client = SoftLayer.Client() # Generate the order template used to place the order def _generateOrder(self, userId, keyName, package, credential=None): # Retrieve the package object in order to know its ID pkg_filter = {&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;: package}} package_list = self.client[&amp;#39;Product_Package&amp;#39;].getAllObjects(filter=pkg_filter) package_id = package_list[0][&amp;#39;id&amp;#39;] # Retrive the available price of external auth item itm_filter = {&amp;#34;itemPrices&amp;#34;:{&amp;#34;item&amp;#34;:{&amp;#34;keyName&amp;#34;:{&amp;#34;operation&amp;#34;:keyName}}}} prices = self.client[&amp;#39;Product_Package&amp;#39;].getItemPrices(filter=itm_filter, id=package_id) # Build skeleton of order template orderTemplate = { &amp;#39;complexType&amp;#39;: &amp;#39;SoftLayer_Container_Product_Order_User_Customer_External_Binding&amp;#39;, &amp;#39;packageId&amp;#39;: package_id, &amp;#39;prices&amp;#39;:[{&amp;#39;id&amp;#39;: prices[0][&amp;#39;id&amp;#39;]}], &amp;#39;userId&amp;#39;: userId, &amp;#39;externalId&amp;#39;: credentialId } return orderTemplate def orderExternalAuth(self, userId, keyName, credential=None): # package used to order an External Auth.</description>
    </item>
  </channel>
</rss>
